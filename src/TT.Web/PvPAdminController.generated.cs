// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using TT.Web.Controllers.Generated;
namespace TT.Web.Controllers
{
    public partial class PvPAdminController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PvPAdminController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PvPAdminController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SendChangeRound()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendChangeRound);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ChangeWorldStatsSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeWorldStatsSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ApproveEffectContribution()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveEffectContribution);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SendPublicBroadcast()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendPublicBroadcast);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ChangeGameDateSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeGameDateSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ApproveContribution()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveContribution);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RejectContribution()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RejectContribution);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ViewServerLog()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewServerLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult WriteFaeSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WriteFaeSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LoadSpecificEncounter()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LoadSpecificEncounter);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult WriteFaeEncounterSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WriteFaeEncounterSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ResetAllPlayersWithIPAddress()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetAllPlayersWithIPAddress);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ToggleBanOnGlobalChat()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ToggleBanOnGlobalChat);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ViewPlayerItems()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewPlayerItems);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ViewPlayerLog()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewPlayerLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ViewItemTransferLog()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewItemTransferLog);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RenamePlayerSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RenamePlayerSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SwapPlayerSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SwapPlayerSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult JokeShopAdminActionsSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.JokeShopAdminActionsSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ModDeleteClassified()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ModDeleteClassified);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditCustomFormSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditCustomFormSend);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteCustomForm()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteCustomForm);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetMembershipIdFromUsername()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetMembershipIdFromUsername);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AdminRename()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminRename);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AdminRenameSend()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminRenameSend);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PvPAdminController Actions { get { return MVC.PvPAdmin; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "pvpadmin";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "pvpadmin";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string CheckLocationConsistency = ("CheckLocationConsistency").ToLowerInvariant();
            public readonly string ChangeWorldStats = ("ChangeWorldStats").ToLowerInvariant();
            public readonly string ChangeRoundText = ("ChangeRoundText").ToLowerInvariant();
            public readonly string SendChangeRound = ("SendChangeRound").ToLowerInvariant();
            public readonly string ChangeWorldStatsSend = ("ChangeWorldStatsSend").ToLowerInvariant();
            public readonly string ApproveEffectContributionList = ("ApproveEffectContributionList").ToLowerInvariant();
            public readonly string ApproveEffectContribution = ("ApproveEffectContribution").ToLowerInvariant();
            public readonly string PublicBroadcast = ("PublicBroadcast").ToLowerInvariant();
            public readonly string SendPublicBroadcast = ("SendPublicBroadcast").ToLowerInvariant();
            public readonly string ChangeGameDate = ("ChangeGameDate").ToLowerInvariant();
            public readonly string ChangeGameDateSend = ("ChangeGameDateSend").ToLowerInvariant();
            public readonly string test = ("test").ToLowerInvariant();
            public readonly string MigrateItemPortraits = ("MigrateItemPortraits").ToLowerInvariant();
            public readonly string SpawnNPCs = ("SpawnNPCs").ToLowerInvariant();
            public readonly string ItemPetJSON = ("ItemPetJSON").ToLowerInvariant();
            public readonly string FormJSON = ("FormJSON").ToLowerInvariant();
            public readonly string SpellJSON = ("SpellJSON").ToLowerInvariant();
            public readonly string EffectJSON = ("EffectJSON").ToLowerInvariant();
            public readonly string FurnitureJSON = ("FurnitureJSON").ToLowerInvariant();
            public readonly string LocationJSON = ("LocationJSON").ToLowerInvariant();
            public readonly string ApproveContributionList = ("ApproveContributionList").ToLowerInvariant();
            public readonly string ApproveContribution = ("ApproveContribution").ToLowerInvariant();
            public readonly string RejectContribution = ("RejectContribution").ToLowerInvariant();
            public readonly string ServerBalance_Forms = ("ServerBalance_Forms").ToLowerInvariant();
            public readonly string ServerBalance_Items = ("ServerBalance_Items").ToLowerInvariant();
            public readonly string ServerBalance_Pets = ("ServerBalance_Pets").ToLowerInvariant();
            public readonly string ServerBalance_Effects = ("ServerBalance_Effects").ToLowerInvariant();
            public readonly string ViewServerLog = ("ViewServerLog").ToLowerInvariant();
            public readonly string ViewUpdateLogs = ("ViewUpdateLogs").ToLowerInvariant();
            public readonly string FaeList = ("FaeList").ToLowerInvariant();
            public readonly string WriteFae = ("WriteFae").ToLowerInvariant();
            public readonly string WriteFaeSend = ("WriteFaeSend").ToLowerInvariant();
            public readonly string WriteFaeEncounter = ("WriteFaeEncounter").ToLowerInvariant();
            public readonly string LoadSpecificEncounter = ("LoadSpecificEncounter").ToLowerInvariant();
            public readonly string WriteFaeEncounterSend = ("WriteFaeEncounterSend").ToLowerInvariant();
            public readonly string ResetAllPlayersWithIPAddress = ("ResetAllPlayersWithIPAddress").ToLowerInvariant();
            public readonly string ToggleBanOnGlobalChat = ("ToggleBanOnGlobalChat").ToLowerInvariant();
            public readonly string Scratchpad = ("Scratchpad").ToLowerInvariant();
            public readonly string AuditDonators = ("AuditDonators").ToLowerInvariant();
            public readonly string Killswitch = ("Killswitch").ToLowerInvariant();
            public readonly string KillswitchRestore = ("KillswitchRestore").ToLowerInvariant();
            public readonly string FindMissingThumbnails = ("FindMissingThumbnails").ToLowerInvariant();
            public readonly string ViewPlayerItems = ("ViewPlayerItems").ToLowerInvariant();
            public readonly string ViewPlayerLog = ("ViewPlayerLog").ToLowerInvariant();
            public readonly string ViewItemTransferLog = ("ViewItemTransferLog").ToLowerInvariant();
            public readonly string RenamePlayer = ("RenamePlayer").ToLowerInvariant();
            public readonly string RenamePlayerSend = ("RenamePlayerSend").ToLowerInvariant();
            public readonly string SwapPlayerSend = ("SwapPlayerSend").ToLowerInvariant();
            public readonly string JokeShopAdminActions = ("JokeShopAdminActions").ToLowerInvariant();
            public readonly string JokeShopAdminActionsSend = ("JokeShopAdminActionsSend").ToLowerInvariant();
            public readonly string ModDeleteClassified = ("ModDeleteClassified").ToLowerInvariant();
            public readonly string FastInanimateMe = ("FastInanimateMe").ToLowerInvariant();
            public readonly string FastPetMe = ("FastPetMe").ToLowerInvariant();
            public readonly string FastAnimateMe = ("FastAnimateMe").ToLowerInvariant();
            public readonly string FastGiveTPScroll = ("FastGiveTPScroll").ToLowerInvariant();
            public readonly string AssignLeadersBadges = ("AssignLeadersBadges").ToLowerInvariant();
            public readonly string ListCustomForms = ("ListCustomForms").ToLowerInvariant();
            public readonly string EditCustomForm = ("EditCustomForm").ToLowerInvariant();
            public readonly string EditCustomFormSend = ("EditCustomFormSend").ToLowerInvariant();
            public readonly string DeleteCustomForm = ("DeleteCustomForm").ToLowerInvariant();
            public readonly string GetMembershipIdFromUsername = ("GetMembershipIdFromUsername").ToLowerInvariant();
            public readonly string SetEveryoneToSP = ("SetEveryoneToSP").ToLowerInvariant();
            public readonly string AdminRename = ("AdminRename").ToLowerInvariant();
            public readonly string AdminRenameSend = ("AdminRenameSend").ToLowerInvariant();
        }


        static readonly ActionParamsClass_SendChangeRound s_params_SendChangeRound = new ActionParamsClass_SendChangeRound();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendChangeRound SendChangeRoundParams { get { return s_params_SendChangeRound; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendChangeRound
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ChangeWorldStatsSend s_params_ChangeWorldStatsSend = new ActionParamsClass_ChangeWorldStatsSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangeWorldStatsSend ChangeWorldStatsSendParams { get { return s_params_ChangeWorldStatsSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangeWorldStatsSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ApproveEffectContribution s_params_ApproveEffectContribution = new ActionParamsClass_ApproveEffectContribution();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ApproveEffectContribution ApproveEffectContributionParams { get { return s_params_ApproveEffectContribution; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ApproveEffectContribution
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_SendPublicBroadcast s_params_SendPublicBroadcast = new ActionParamsClass_SendPublicBroadcast();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendPublicBroadcast SendPublicBroadcastParams { get { return s_params_SendPublicBroadcast; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendPublicBroadcast
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ChangeGameDateSend s_params_ChangeGameDateSend = new ActionParamsClass_ChangeGameDateSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangeGameDateSend ChangeGameDateSendParams { get { return s_params_ChangeGameDateSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangeGameDateSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ApproveContribution s_params_ApproveContribution = new ActionParamsClass_ApproveContribution();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ApproveContribution ApproveContributionParams { get { return s_params_ApproveContribution; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ApproveContribution
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_RejectContribution s_params_RejectContribution = new ActionParamsClass_RejectContribution();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RejectContribution RejectContributionParams { get { return s_params_RejectContribution; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RejectContribution
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ViewServerLog s_params_ViewServerLog = new ActionParamsClass_ViewServerLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ViewServerLog ViewServerLogParams { get { return s_params_ViewServerLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ViewServerLog
        {
            public readonly string turn = ("turn").ToLowerInvariant();
        }
        static readonly ActionParamsClass_WriteFae s_params_WriteFae = new ActionParamsClass_WriteFae();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_WriteFae WriteFaeParams { get { return s_params_WriteFae; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_WriteFae
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_WriteFaeSend s_params_WriteFaeSend = new ActionParamsClass_WriteFaeSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_WriteFaeSend WriteFaeSendParams { get { return s_params_WriteFaeSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_WriteFaeSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_LoadSpecificEncounter s_params_LoadSpecificEncounter = new ActionParamsClass_LoadSpecificEncounter();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadSpecificEncounter LoadSpecificEncounterParams { get { return s_params_LoadSpecificEncounter; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadSpecificEncounter
        {
            public readonly string filename = ("filename").ToLowerInvariant();
        }
        static readonly ActionParamsClass_WriteFaeEncounterSend s_params_WriteFaeEncounterSend = new ActionParamsClass_WriteFaeEncounterSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_WriteFaeEncounterSend WriteFaeEncounterSendParams { get { return s_params_WriteFaeEncounterSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_WriteFaeEncounterSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ResetAllPlayersWithIPAddress s_params_ResetAllPlayersWithIPAddress = new ActionParamsClass_ResetAllPlayersWithIPAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ResetAllPlayersWithIPAddress ResetAllPlayersWithIPAddressParams { get { return s_params_ResetAllPlayersWithIPAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ResetAllPlayersWithIPAddress
        {
            public readonly string address = ("address").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ToggleBanOnGlobalChat s_params_ToggleBanOnGlobalChat = new ActionParamsClass_ToggleBanOnGlobalChat();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ToggleBanOnGlobalChat ToggleBanOnGlobalChatParams { get { return s_params_ToggleBanOnGlobalChat; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ToggleBanOnGlobalChat
        {
            public readonly string suspendTimeoutViewModel = ("suspendTimeoutViewModel").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ViewPlayerItems s_params_ViewPlayerItems = new ActionParamsClass_ViewPlayerItems();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ViewPlayerItems ViewPlayerItemsParams { get { return s_params_ViewPlayerItems; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ViewPlayerItems
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ViewPlayerLog s_params_ViewPlayerLog = new ActionParamsClass_ViewPlayerLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ViewPlayerLog ViewPlayerLogParams { get { return s_params_ViewPlayerLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ViewPlayerLog
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ViewItemTransferLog s_params_ViewItemTransferLog = new ActionParamsClass_ViewItemTransferLog();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ViewItemTransferLog ViewItemTransferLogParams { get { return s_params_ViewItemTransferLog; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ViewItemTransferLog
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_RenamePlayer s_params_RenamePlayer = new ActionParamsClass_RenamePlayer();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RenamePlayer RenamePlayerParams { get { return s_params_RenamePlayer; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RenamePlayer
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_RenamePlayerSend s_params_RenamePlayerSend = new ActionParamsClass_RenamePlayerSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RenamePlayerSend RenamePlayerSendParams { get { return s_params_RenamePlayerSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RenamePlayerSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_SwapPlayerSend s_params_SwapPlayerSend = new ActionParamsClass_SwapPlayerSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SwapPlayerSend SwapPlayerSendParams { get { return s_params_SwapPlayerSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SwapPlayerSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_JokeShopAdminActions s_params_JokeShopAdminActions = new ActionParamsClass_JokeShopAdminActions();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_JokeShopAdminActions JokeShopAdminActionsParams { get { return s_params_JokeShopAdminActions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_JokeShopAdminActions
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_JokeShopAdminActionsSend s_params_JokeShopAdminActionsSend = new ActionParamsClass_JokeShopAdminActionsSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_JokeShopAdminActionsSend JokeShopAdminActionsSendParams { get { return s_params_JokeShopAdminActionsSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_JokeShopAdminActionsSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ModDeleteClassified s_params_ModDeleteClassified = new ActionParamsClass_ModDeleteClassified();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ModDeleteClassified ModDeleteClassifiedParams { get { return s_params_ModDeleteClassified; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ModDeleteClassified
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_EditCustomForm s_params_EditCustomForm = new ActionParamsClass_EditCustomForm();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditCustomForm EditCustomFormParams { get { return s_params_EditCustomForm; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditCustomForm
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_EditCustomFormSend s_params_EditCustomFormSend = new ActionParamsClass_EditCustomFormSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditCustomFormSend EditCustomFormSendParams { get { return s_params_EditCustomFormSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditCustomFormSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ActionParamsClass_DeleteCustomForm s_params_DeleteCustomForm = new ActionParamsClass_DeleteCustomForm();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteCustomForm DeleteCustomFormParams { get { return s_params_DeleteCustomForm; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteCustomForm
        {
            public readonly string Id = ("Id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_GetMembershipIdFromUsername s_params_GetMembershipIdFromUsername = new ActionParamsClass_GetMembershipIdFromUsername();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetMembershipIdFromUsername GetMembershipIdFromUsernameParams { get { return s_params_GetMembershipIdFromUsername; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetMembershipIdFromUsername
        {
            public readonly string name = ("name").ToLowerInvariant();
        }
        static readonly ActionParamsClass_AdminRename s_params_AdminRename = new ActionParamsClass_AdminRename();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminRename AdminRenameParams { get { return s_params_AdminRename; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminRename
        {
            public readonly string id = ("id").ToLowerInvariant();
        }
        static readonly ActionParamsClass_AdminRenameSend s_params_AdminRenameSend = new ActionParamsClass_AdminRenameSend();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminRenameSend AdminRenameSendParams { get { return s_params_AdminRenameSend; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminRenameSend
        {
            public readonly string input = ("input").ToLowerInvariant();
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AdminRename = "AdminRename";
                public readonly string ApproveContributionList = "ApproveContributionList";
                public readonly string ApproveEffectContributionList = "ApproveEffectContributionList";
                public readonly string ChangeGameDate = "ChangeGameDate";
                public readonly string ChangeRoundText = "ChangeRoundText";
                public readonly string ChangeWorldStats = "ChangeWorldStats";
                public readonly string DungeonTest = "DungeonTest";
                public readonly string EditCustomForm = "EditCustomForm";
                public readonly string FaeList = "FaeList";
                public readonly string FindMissingThumbnails = "FindMissingThumbnails";
                public readonly string Index = "Index";
                public readonly string JokeShopAdminActions = "JokeShopAdminActions";
                public readonly string ListCustomForms = "ListCustomForms";
                public readonly string PublicBroadcast = "PublicBroadcast";
                public readonly string RenamePlayer = "RenamePlayer";
                public readonly string Scratchpad = "Scratchpad";
                public readonly string ServerBalance = "ServerBalance";
                public readonly string ViewItemTransferLog = "ViewItemTransferLog";
                public readonly string ViewPlayerItems = "ViewPlayerItems";
                public readonly string ViewPlayerLog = "ViewPlayerLog";
                public readonly string ViewServerLog = "ViewServerLog";
                public readonly string ViewUpdateLogs = "ViewUpdateLogs";
                public readonly string WriteFae = "WriteFae";
                public readonly string WriteFaeEncounter = "WriteFaeEncounter";
            }
            public readonly string AdminRename = "~/Views/PvPAdmin/AdminRename.cshtml";
            public readonly string ApproveContributionList = "~/Views/PvPAdmin/ApproveContributionList.cshtml";
            public readonly string ApproveEffectContributionList = "~/Views/PvPAdmin/ApproveEffectContributionList.cshtml";
            public readonly string ChangeGameDate = "~/Views/PvPAdmin/ChangeGameDate.cshtml";
            public readonly string ChangeRoundText = "~/Views/PvPAdmin/ChangeRoundText.cshtml";
            public readonly string ChangeWorldStats = "~/Views/PvPAdmin/ChangeWorldStats.cshtml";
            public readonly string DungeonTest = "~/Views/PvPAdmin/DungeonTest.cshtml";
            public readonly string EditCustomForm = "~/Views/PvPAdmin/EditCustomForm.cshtml";
            public readonly string FaeList = "~/Views/PvPAdmin/FaeList.cshtml";
            public readonly string FindMissingThumbnails = "~/Views/PvPAdmin/FindMissingThumbnails.cshtml";
            public readonly string Index = "~/Views/PvPAdmin/Index.cshtml";
            public readonly string JokeShopAdminActions = "~/Views/PvPAdmin/JokeShopAdminActions.cshtml";
            public readonly string ListCustomForms = "~/Views/PvPAdmin/ListCustomForms.cshtml";
            public readonly string PublicBroadcast = "~/Views/PvPAdmin/PublicBroadcast.cshtml";
            public readonly string RenamePlayer = "~/Views/PvPAdmin/RenamePlayer.cshtml";
            public readonly string Scratchpad = "~/Views/PvPAdmin/Scratchpad.cshtml";
            public readonly string ServerBalance = "~/Views/PvPAdmin/ServerBalance.cshtml";
            public readonly string ViewItemTransferLog = "~/Views/PvPAdmin/ViewItemTransferLog.cshtml";
            public readonly string ViewPlayerItems = "~/Views/PvPAdmin/ViewPlayerItems.cshtml";
            public readonly string ViewPlayerLog = "~/Views/PvPAdmin/ViewPlayerLog.cshtml";
            public readonly string ViewServerLog = "~/Views/PvPAdmin/ViewServerLog.cshtml";
            public readonly string ViewUpdateLogs = "~/Views/PvPAdmin/ViewUpdateLogs.cshtml";
            public readonly string WriteFae = "~/Views/PvPAdmin/WriteFae.cshtml";
            public readonly string WriteFaeEncounter = "~/Views/PvPAdmin/WriteFaeEncounter.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PvPAdminController : TT.Web.Controllers.PvPAdminController
    {
        public T4MVC_PvPAdminController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CheckLocationConsistencyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult CheckLocationConsistency()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckLocationConsistency);
            CheckLocationConsistencyOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ChangeWorldStatsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangeWorldStats()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeWorldStats);
            ChangeWorldStatsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ChangeRoundTextOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangeRoundText()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeRoundText);
            ChangeRoundTextOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SendChangeRoundOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.World.DTOs.WorldDetail input);

        [NonAction]
        public override System.Web.Mvc.ActionResult SendChangeRound(TT.Domain.World.DTOs.WorldDetail input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendChangeRound);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            SendChangeRoundOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void ChangeWorldStatsSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.Models.PvPWorldStat input);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangeWorldStatsSend(TT.Domain.Models.PvPWorldStat input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeWorldStatsSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            ChangeWorldStatsSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void ApproveEffectContributionListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ApproveEffectContributionList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveEffectContributionList);
            ApproveEffectContributionListOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ApproveEffectContributionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ApproveEffectContribution(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveEffectContribution);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ApproveEffectContributionOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void PublicBroadcastOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult PublicBroadcast()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PublicBroadcast);
            PublicBroadcastOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SendPublicBroadcastOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.PublicBroadcastViewModel input);

        [NonAction]
        public override System.Web.Mvc.ActionResult SendPublicBroadcast(TT.Domain.ViewModels.PublicBroadcastViewModel input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendPublicBroadcast);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            SendPublicBroadcastOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void ChangeGameDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangeGameDate()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeGameDate);
            ChangeGameDateOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ChangeGameDateSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.PublicBroadcastViewModel input);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangeGameDateSend(TT.Domain.ViewModels.PublicBroadcastViewModel input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeGameDateSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            ChangeGameDateSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void testOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult test()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.test);
            testOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void MigrateItemPortraitsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult MigrateItemPortraits()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MigrateItemPortraits);
            MigrateItemPortraitsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SpawnNPCsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpawnNPCs()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpawnNPCs);
            SpawnNPCsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ItemPetJSONOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ItemPetJSON()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ItemPetJSON);
            ItemPetJSONOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FormJSONOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FormJSON()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FormJSON);
            FormJSONOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SpellJSONOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpellJSON()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpellJSON);
            SpellJSONOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void EffectJSONOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult EffectJSON()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EffectJSON);
            EffectJSONOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FurnitureJSONOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FurnitureJSON()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FurnitureJSON);
            FurnitureJSONOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LocationJSONOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LocationJSON()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LocationJSON);
            LocationJSONOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ApproveContributionListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ApproveContributionList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveContributionList);
            ApproveContributionListOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ApproveContributionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ApproveContribution(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveContribution);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ApproveContributionOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void RejectContributionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult RejectContribution(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RejectContribution);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            RejectContributionOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ServerBalance_FormsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ServerBalance_Forms()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServerBalance_Forms);
            ServerBalance_FormsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ServerBalance_ItemsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ServerBalance_Items()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServerBalance_Items);
            ServerBalance_ItemsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ServerBalance_PetsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ServerBalance_Pets()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServerBalance_Pets);
            ServerBalance_PetsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ServerBalance_EffectsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ServerBalance_Effects()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServerBalance_Effects);
            ServerBalance_EffectsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ViewServerLogOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int turn);

        [NonAction]
        public override System.Web.Mvc.ActionResult ViewServerLog(int turn)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewServerLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "turn", turn);
            ViewServerLogOverride(callInfo, turn);
            return callInfo;
        }

        [NonAction]
        partial void ViewUpdateLogsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ViewUpdateLogs()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewUpdateLogs);
            ViewUpdateLogsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FaeListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FaeList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FaeList);
            FaeListOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void WriteFaeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult WriteFae(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WriteFae);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            WriteFaeOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void WriteFaeSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.Models.JewdewfaeEncounter input);

        [NonAction]
        public override System.Web.Mvc.ActionResult WriteFaeSend(TT.Domain.Models.JewdewfaeEncounter input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WriteFaeSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            WriteFaeSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void WriteFaeEncounterOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult WriteFaeEncounter()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WriteFaeEncounter);
            WriteFaeEncounterOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LoadSpecificEncounterOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string filename);

        [NonAction]
        public override System.Web.Mvc.ActionResult LoadSpecificEncounter(string filename)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LoadSpecificEncounter);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filename", filename);
            LoadSpecificEncounterOverride(callInfo, filename);
            return callInfo;
        }

        [NonAction]
        partial void WriteFaeEncounterSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.FairyChallengeBag input);

        [NonAction]
        public override System.Web.Mvc.ActionResult WriteFaeEncounterSend(TT.Domain.ViewModels.FairyChallengeBag input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WriteFaeEncounterSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            WriteFaeEncounterSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void ResetAllPlayersWithIPAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string address);

        [NonAction]
        public override System.Web.Mvc.ActionResult ResetAllPlayersWithIPAddress(string address)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetAllPlayersWithIPAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "address", address);
            ResetAllPlayersWithIPAddressOverride(callInfo, address);
            return callInfo;
        }

        [NonAction]
        partial void ToggleBanOnGlobalChatOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.SuspendTimeoutViewModel suspendTimeoutViewModel);

        [NonAction]
        public override System.Web.Mvc.ActionResult ToggleBanOnGlobalChat(TT.Domain.ViewModels.SuspendTimeoutViewModel suspendTimeoutViewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ToggleBanOnGlobalChat);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "suspendTimeoutViewModel", suspendTimeoutViewModel);
            ToggleBanOnGlobalChatOverride(callInfo, suspendTimeoutViewModel);
            return callInfo;
        }

        [NonAction]
        partial void ScratchpadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Scratchpad()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Scratchpad);
            ScratchpadOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AuditDonatorsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AuditDonators()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AuditDonators);
            AuditDonatorsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void KillswitchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Killswitch()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Killswitch);
            KillswitchOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void KillswitchRestoreOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult KillswitchRestore()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.KillswitchRestore);
            KillswitchRestoreOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FindMissingThumbnailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FindMissingThumbnails()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FindMissingThumbnails);
            FindMissingThumbnailsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ViewPlayerItemsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ViewPlayerItems(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewPlayerItems);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ViewPlayerItemsOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ViewPlayerLogOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ViewPlayerLog(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewPlayerLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ViewPlayerLogOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ViewItemTransferLogOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ViewItemTransferLog(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewItemTransferLog);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ViewItemTransferLogOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void RenamePlayerOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult RenamePlayer(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RenamePlayer);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            RenamePlayerOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void RenamePlayerSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.PlayerNameViewModel input);

        [NonAction]
        public override System.Web.Mvc.ActionResult RenamePlayerSend(TT.Domain.ViewModels.PlayerNameViewModel input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RenamePlayerSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            RenamePlayerSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void SwapPlayerSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.PlayerNameViewModel input);

        [NonAction]
        public override System.Web.Mvc.ActionResult SwapPlayerSend(TT.Domain.ViewModels.PlayerNameViewModel input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SwapPlayerSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            SwapPlayerSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void JokeShopAdminActionsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult JokeShopAdminActions(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.JokeShopAdminActions);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            JokeShopAdminActionsOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void JokeShopAdminActionsSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.JokeShopActionViewModel input);

        [NonAction]
        public override System.Web.Mvc.ActionResult JokeShopAdminActionsSend(TT.Domain.ViewModels.JokeShopActionViewModel input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.JokeShopAdminActionsSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            JokeShopAdminActionsSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void ModDeleteClassifiedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ModDeleteClassified(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ModDeleteClassified);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModDeleteClassifiedOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void FastInanimateMeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FastInanimateMe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FastInanimateMe);
            FastInanimateMeOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FastPetMeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FastPetMe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FastPetMe);
            FastPetMeOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FastAnimateMeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FastAnimateMe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FastAnimateMe);
            FastAnimateMeOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FastGiveTPScrollOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FastGiveTPScroll()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FastGiveTPScroll);
            FastGiveTPScrollOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AssignLeadersBadgesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AssignLeadersBadges()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AssignLeadersBadges);
            AssignLeadersBadgesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListCustomFormsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ListCustomForms()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListCustomForms);
            ListCustomFormsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void EditCustomFormOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditCustomForm(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditCustomForm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditCustomFormOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditCustomFormSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.Models.ContributorCustomForm input);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditCustomFormSend(TT.Domain.Models.ContributorCustomForm input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditCustomFormSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            EditCustomFormSendOverride(callInfo, input);
            return callInfo;
        }

        [NonAction]
        partial void DeleteCustomFormOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteCustomForm(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteCustomForm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            DeleteCustomFormOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void GetMembershipIdFromUsernameOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string name);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetMembershipIdFromUsername(string name)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetMembershipIdFromUsername);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            GetMembershipIdFromUsernameOverride(callInfo, name);
            return callInfo;
        }

        [NonAction]
        partial void SetEveryoneToSPOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult SetEveryoneToSP()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetEveryoneToSP);
            SetEveryoneToSPOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AdminRenameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminRename(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminRename);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AdminRenameOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void AdminRenameSendOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TT.Domain.ViewModels.PlayerNameViewModel input);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminRenameSend(TT.Domain.ViewModels.PlayerNameViewModel input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminRenameSend);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            AdminRenameSendOverride(callInfo, input);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
