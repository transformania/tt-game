@model TT.Domain.ViewModels.ItemDetailsModel

@using TT.Domain.Items.DTOs
@using TT.Domain.Statics
@using TT.Domain.ViewModels
@using TT.Web.CustomHtmlHelpers

<div class="portrait col-md-2 col-sm-4 col-xs-12" style="background-image: url(@PortraitHelper.GetGraphicByItemType(Model.Item.ItemSource.ItemType, Model.Item.ItemSource.PortraitUrl, true));">
    @HtmlHelpers.PrintItemTypeIcon(Model.Item.ItemSource.ItemType)
    @HtmlHelpers.PrintSouledIcon(Model.Item)
</div>

<b>

    @Model.Item.ItemSource.FriendlyName @Html.Partial(MVC.Item.Views.partial.RuneDetails, Model.Item)

    @{

        if (Model.Item.Level > 0)
        {
            <span>(Lvl @Model.Item.Level)</span>
        }

        if (Model.Item.IsEquipped)
        {
            <span> (Equipped)</span>
        }

        if (Model.Item.FormerPlayer != null)
        {
            <span class="formerly">@(Model.Item.FormerPlayer.IsUsingOriginalName() ? "Formerly" : "Known as") <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Item.FormerPlayer.Id))">@Model.Item.FormerPlayer.FullName</a></span>
            @HtmlHelpers.PrintPermanencyIcon(Model.Item.IsPermanent)
        }

    }

    <br>
</b>

<p>
    @{
        if (Model.Item.ItemSource.Description.Length > 1500)
        {
            <p>@Model.Item.ItemSource.Description.Substring(0, 1500)…</p>
        }
        else
        {
            <p>@Model.Item.ItemSource.Description</p>
        }
    }
</p>

<div class="bonuses">

    <ul>
        @{
            foreach (var skill in Model.Skills)
            {
                <li>Gives the @skill.FriendlyName ability when equipped</li>
            }

            if (Model.Item.ItemSource.GivesEffectSourceId != null)
            {
                <li>Gives the @HtmlHelpers.GetEffectFriendlyName(Model.Item.ItemSource.GivesEffectSourceId.Value) effect</li>
            }
        }

    </ul>

    @{
        if (Model.Item.ItemSource.ItemType == PvPStatics.ItemType_Rune)
        {
            @Html.Partial(MVC.Item.Views.partial.RuneStats, new ItemRuneDetailViewModel(new ItemRuneDetail { ItemSource = Model.Item.ItemSource }, false))
        }

        foreach (var rune in Model.Item.Runes)
        {
            @Html.Partial(MVC.Item.Views.partial.RuneStats, new ItemRuneDetailViewModel(rune))
        }
    }

</div>