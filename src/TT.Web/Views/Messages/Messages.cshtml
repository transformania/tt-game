@model TT.Domain.ViewModels.MessageBag
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics
@{
    ViewBag.Title = "Messages";
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    <li><a href="@Url.Action(MVC.PvP.PlayerLookup())">Search for player by name</a></li>
    <li><a href="javascript:void(0)" id="deleteAll" style="color: #734752 !important; font-weight: bold;">Delete All Messages</a></li>
    <li><a href="@Url.Action(MVC.Info.Rules())" target="_blank">Rules</a></li>
}

<div id="realLink" class="specialBox specialBox2" style="display: none;">
    <span style="color:red;">Do you really want to delete all the messages? If yes then please click link below:</span><br>
    @using (Html.BeginForm(MVC.Messages.DeleteMessage(), FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <input name="deleteAll" type="hidden" value="True">
        <input name="messageId" type="hidden" value="-1">

        <input type="submit" value="Yes, I want to delete all my messages">
    }
</div>

@{ 
    <div class="specialBox">
        <div class="small">
            @if (Model.FriendOnlyMessages)
            {
                <p>You are currently only allowing messages from friends. <a href="#showToggle" id="showToggle">Toggle it to allow messages from all users.</a></p>
                <p id="toggleDiv" style="display: none;"><br><a href="@Url.Action(MVC.Settings.UpdateFriendOnlyMessages(false))">Allow messages from all users.</a></p>
            }
            else
            {
                <p>You are currently allowing messages from all users. <a href="#showToggle" id="showToggle">Toggle it to allow messages only from friends.</a></p>
                <p id="toggleDiv" style="display: none;"><br><a href="@Url.Action(MVC.Settings.UpdateFriendOnlyMessages(true))">Allow messages only from friends.</a></p>
            }
        </div>
    </div>
}

<div class="specialBox specialHeader">
    <b>Received Messages (@Model.Paginator.TotalCount/@Model.InboxSize)</b>
</div>

<div class="containerInner">

    <span>Jump to page:</span>

    @{
        for (var i = 0; i < Model.Paginator.MaxPageNumber; i++)
        {
            <a href="@Url.Action(MVC.Messages.Index(i))" class="@Model.Paginator.GetStylingClass(i)">@(i + 1) | </a>
        }
    }

    <span><i>@Model.Paginator.TotalCount total messages</i></span>


    <table class="table table-hover messageTable">
        <thead>
            <tr>
                <th style="width: 25%;">Sender</th>
                <th>Message</th>
                <th style="width: 16%;">Time Sent</th>
                <th style="width: 20%;">Action</th>
            </tr>
        </thead>
        <tbody>
            @{

                string messageTeaser;
                int msgLength;

                foreach (var msg in Model.Messages)
                {


                    msgLength = msg.MessageText.Length;
                    if (msgLength > 50)
                    {
                        messageTeaser = msg.MessageText.Substring(0, 50) + "...";

                    }
                    else
                    {
                        messageTeaser = msg.MessageText.Substring(0, msgLength);
                    }

                    <tr>

                    <td><a href="@Url.Action(MVC.PvP.LookAtPlayer(msg.Sender.Id))">@msg.Sender.GetFullName()</a></td>

                    @{
                        if (msg.ReadStatus == 0 || msg.ReadStatus == 2)
                        {
                            <td class="newlink"><a href="@Url.Action(MVC.Messages.ReadMessage(msg.MessageId))">@messageTeaser</a></td>
                        }
                        else
                        {
                            <td><a href="@Url.Action(MVC.Messages.ReadMessage(msg.MessageId))">@messageTeaser</a></td>
                        }
                    }

                        <td class="timeSent"><span style="font-size: 10px">@HtmlHelpers.DatetimeToTimeago(msg.Timestamp)</span></td>
                        <td>
                            @using (Html.BeginForm(MVC.Messages.DeleteMessage(), FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                <input name="deleteAll" type="hidden" value="False">
                                <input name="messageId" type="hidden" value="@msg.MessageId">

                                <input type="submit" value="Delete Message">
                            }

                            @if (msg.ReadStatus == MessageStatics.Read)
                            {
                                using (Html.BeginForm(MVC.Messages.MarkReadStatus(), FormMethod.Post, new {id = "markForm"}))
                                {
                                    @Html.AntiForgeryToken()
                                    <input name="messageId" type="hidden" value="@msg.MessageId">
                                    <input name="ReadStatus" type="hidden" value="@MessageStatics.ReadAndMarkedAsUnread">

                                    <input type="submit" value="Mark As Unread">
                                }
                            }
                            else
                            {
                                using (Html.BeginForm(MVC.Messages.MarkReadStatus(), FormMethod.Post, new {id = "markForm"}))
                                {
                                    @Html.AntiForgeryToken()
                                    <input name="messageId" type="hidden" value="@msg.MessageId">
                                    <input name="ReadStatus" type="hidden" value="@MessageStatics.Read">

                                    <input type="submit" value="Mark As Read">
                                }
                            }



                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    @{

        if (ViewBag.IsDonator == null || !ViewBag.IsDonator)
        {
            <p class="warningText">
                Only the @Model.InboxSize most recent messages you've recieved will be saved.  Older messages will be deleted automatically.
            </p>
        }

        else if (ViewBag.IsDonator)
        {
            <p class="warningText">
                <b>You are marked as having a Tier 3 donator level, which means you can keep up to 500 messages in your inbox and your older messages will NOT be deleted automatically by the turn update.</b>
            </p>
        }
    }
</div>

<div class="specialBox specialHeader topBorder">
    <b>Sent Messages</b>
</div>

<div class="containerInner">

    <table class="table table-hover messageTable">
        <thead>
            <tr>
                <th style="width: 25%;">Recipient</th>
                <th>Message</th>
                <th style="width: 16%;">Time Sent</th>
                <th style="width: 10%;">Read</th>
            </tr>
        </thead>
        <tbody>

            @{foreach (var msg in Model.SentMessages)
            {
                <tr>
                    <td><a href="@Url.Action(MVC.PvP.LookAtPlayer(msg.Receiver.Id))">@msg.Receiver.GetFullName()</a></td>
                    <td>@msg.MessageText</td>
                    <td class="timeSent"><span style="font-size: 10px">@HtmlHelpers.DatetimeToTimeago(msg.Timestamp)</span></td>
                    <td>@HtmlHelpers.PrintMessageReadStatus(msg)</td>
                </tr>
            }
            }


        </tbody>

    </table>

    @{
        if (Model.WearerId != -1 && Model.WearerName != null && Model.WearerBotId == AIStatics.ActivePlayerBotId)
        {

            <p> <a href="@Url.Action(MVC.Messages.Write(Model.WearerId, -1))">Telepathically talk to the person wearing you, @Model.WearerName</a> </p>
        }
    }
</div>

@section scripts
{
    <script>
        $("#deleteAll").on('click', function () {
            if ($("#realLink").is(":visible") === false) {
                $("#realLink").show();
            } else {
                $("#realLink").hide();
            }
        });

        $(document).ready(function () {
            $('#DeleteLink').on('click', function () {
                document.getElementById('realLink').style.display = "block";
            });
        });

        $("#showToggle").click(function () {
            if ($("#toggleDiv").is(":visible") === false) {
                $("#toggleDiv").show();
            } else {
                $("#toggleDiv").hide();
            }
        });
    </script>
}

