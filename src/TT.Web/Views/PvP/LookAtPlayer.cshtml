@model TT.Domain.ViewModels.PlayerFormItemsSkillsViewModel
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Models
@using TT.Domain.Statics
@using TT.Domain.Procedures
@using TT.Domain.World.Queries
@{
    ViewBag.Title = Model.PlayerForm.Player.GetFullName();
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>

    @{
        if (Model.PlayerForm.Player.BotId != AIStatics.RerolledPlayerBotId)
        {
            <p>
                @{
                    if (ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.Item.MyInventory())">Inventory</a></li>
                    }

                    if (ViewBag.HasBio)
                    {
                        <li><a href="@Url.Action(MVC.Settings.ViewBio(Model.EffectivePlayerForm.Player.MembershipId))">View Bio</a></li>
                    }
                    else if (ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.Settings.SetBio())">Create bio</a></li>
                    }

                    if (ViewBag.HasArtistAuthorBio)
                    {
                        <li><a href="@Url.Action(MVC.Settings.AuthorArtistBio(Model.EffectivePlayerForm.Player.MembershipId))">View Artist/Author Bio</a></li>
                    }

                    if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {
                        <li><a href="@Url.Action(MVC.Settings.PlayerStats(Model.PlayerForm.Player.MembershipId))">View Statistics</a></li>
                    }

                    <li><a href="@Url.Action(MVC.PvP.ViewEffects(Model.PlayerForm.Player.Id))">View Effects</a></li>

                    if (Model.EffectivePlayerForm.Player.BotId == AIStatics.ActivePlayerBotId && !ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.Messages.Write(Model.EffectivePlayerForm.Player.Id, -1))">Send a Message</a></li>
                    }
                    if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId && !ViewBag.IsMe)
                    {
                        <li><a href="@Url.Action(MVC.PvP.AddFriend(Model.PlayerForm.Player.Id))">Add Friend</a></li>
                        <li><a href="#showBlacklist" id="showBlacklist" data-toggle="modal" data-target="#blacklistModal">Blacklist Player</a></li>
                        <li><a href="@Url.Action(MVC.Report.Report(Model.PlayerForm.Player.MembershipId))">Report Player</a></li>

                        <!-- blacklist modal -->
                        <div class="modal fade" id="blacklistModal" role="dialog">
                            <div class="modal-dialog modal-sm bg-warning">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="close outline-text" data-dismiss="modal">&times;</button>
                                        <h4 class="modal-title">Blacklist Player</h4>
                                    </div>
                                    <div class="modal-body">
                                        <p class="small">
                                        @{
                                            var BlacklistLevel = BlacklistProcedures.IsAttackBlacklisted(new Player { MembershipId = ViewBag.MyId }, new Player { MembershipId = Model.PlayerForm.Player.MembershipId });
                                            if (BlacklistLevel == "0")
                                            {
                                                <span>They cannot attack you.</span><br /><br />
                                                <li class="outline-text">
                                                <a href="@Url.Action(MVC.Settings.ChangeBlacklistType(0, Model.PlayerForm.Player.Id, "noAttackOrMessage"))">No attacking or messaging.</a>
                                                </li>
                                                <li class="outline-text"><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id, 0))">Remove blacklist entry.</a></li>
                                            }
                                            else if (BlacklistLevel == "1")
                                            {
                                                <span>They cannot attack or message you.</span><br /><br />
                                                <li class="outline-text">
                                                <a href="@Url.Action(MVC.Settings.ChangeBlacklistType(0, Model.PlayerForm.Player.Id, "noAttackOnly"))">No attacking.</a>
                                                </li>
                                                <li class="outline-text"><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id, 0))">Remove blacklist entry.</a></li>
                                            }
                                            else
                                            {
                                                <span>They are not blacklisted.</span>
                                                <br /><br />
                                                <li class="outline-text"><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id, 0))" >No attacking.</a></li>
                                                <li class="outline-text"><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.PlayerForm.Player.Id, 1))" >No attacking or messaging.</a></li>
                                            }
                                        }
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </p>
        }
        else
        {
            <p style="color: red;">&nbsp; </p>
        }
    }
}

@{
    if (Model.PlayerForm.Player.BotId != AIStatics.RerolledPlayerBotId)
    {
        <p>
            &nbsp;
        </p>
    }
    else
    {
        <div>
            <p class="infoMessage error">This player is no longer active and cannot be messaged or have a friend request sent to them.</p>
        </div>
    }
}

<div class="containerInner">

    <center>

        @{
            /* Given this is only for one form and I want to do this, I'm probably doing this a little dirty.
             * The form 'Tainted Angel' seemed interesting enough to have me doing this stuff.
             * Will it cause confusion? Of that I have no doubt at all!
             * But, I'm setting it up so potentially in the future, three different images can be set.
             * With those things set, it can do this kind of shenanigans: 33% of the time or 1% of the time.
             *
             * I may expand this to other view models, such as thumbnails.
             * I just wanted to include a tiny little easter egg!
             *
             * Entries into the database for secondary and tertiary portraits has to be manually entered.
             * Why? Because I don't expect this to be a common occurrence.  There is no tool for this right now.
             */

            String getImage;
            Random rnd = new Random();
            int d100 = rnd.Next(1, 101);

            if (!String.IsNullOrEmpty(Model.PlayerForm.Form.TertiaryPortraitUrl) && d100 == 100)
            {
                getImage = Model.PlayerForm.Form.TertiaryPortraitUrl;
            }
            else if (!String.IsNullOrEmpty(Model.PlayerForm.Form.SecondaryPortraitUrl) && d100 >= 66)
            {
                getImage = Model.PlayerForm.Form.SecondaryPortraitUrl;
            }
            else
            {
                getImage = Model.PlayerForm.Form.PortraitUrl;
            }

            if (getImage.IsNullOrEmpty() && Model.PlayerForm.Form.ItemSourceId.HasValue)
            {
                var staticItem = new GetStaticItem { ItemSourceId = Model.PlayerForm.Form.ItemSourceId.Value }.Find();

                if (staticItem != null)
                {
                    getImage = staticItem.PortraitUrl;
                }
            }

            String portraits = "portraits";

            if (Model.PlayerForm.Form.MobilityType == PvPStatics.MobilityPet)
            {
                portraits = "animalPortraits";
            }
            else if (Model.PlayerForm.Form.MobilityType == PvPStatics.MobilityInanimate)
            {
                portraits = "itemsPortraits";
            }
        }

        <div class="leftDisplay" style="background-image: url(https://images.transformaniatime.com/@portraits/@getImage);">
            <span class="icon icon-level"><b>@Model.PlayerForm.Player.Level</b></span>
            <span style="float:right;">@HtmlHelpers.PrintGenderIcon(Model.PlayerForm.Player.Gender)</span>
            <span class="iconPortrait">
                @HtmlHelpers.PrintDonatorIcon(Model.PlayerForm.Player.ToDbPlayer())
                @HtmlHelpers.PrintRPIcon(Model.PlayerForm.Player.ToDbPlayer())
                @HtmlHelpers.PrintPvPIcon(Model.PlayerForm.Player.ToDbPlayer())
            </span>
            @if (Model.PlayerForm.Player.InHardmode)
            {
                <span class="icon icon-hard" title="This player is in Hard Mode."></span>
            }
            @if (Model.PlayerForm.Player.FriendOnlyMessages)
            {
                <span class="glyphicon glyphicon-headphones text-danger stroke-white well-sm" style="position: absolute; top: auto; bottom: 6px; right: 7px; width: 16px; height: 16px;" title="Only allowing messages from friends"></span>
            }
        </div>
        <div class="rightDisplay">
            <p class="avatarName center-block">@Model.PlayerForm.Player.GetFullName()</p>
            <center>
                <p class="avatarOriginalName">(Original name: @Model.PlayerForm.Player.OriginalFirstName @Model.PlayerForm.Player.OriginalLastName)</p>
                @HtmlHelpers.GetCovenantInfo(Model.PlayerForm.Player.ToDbPlayer())
                @{
                    if (ViewBag.TimeUntilLogout > 0 && Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                    {<p class="good">Online for @ViewBag.TimeUntilLogout more minutes</p>}
                else if (Model.PlayerForm.Player.BotId == AIStatics.ActivePlayerBotId)
                {<p class="bad">Offline</p>}
                }
                <span class="health">Willpower:  @Model.PlayerForm.Player.Health / @Model.PlayerForm.Player.MaxHealth</span><br>
                <span class="mana">Mana:  @Model.PlayerForm.Player.Mana / @Model.PlayerForm.Player.MaxMana</span>
                @{
                    if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic * 3)
                    {
                        <p class="bad">Due to this player's very poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation and has attacked @Model.PlayerForm.Player.TimesAttackingThisUpdate times this update and has @Model.PlayerForm.Player.ActionPoints action points remaining.</p>
                    }
                    else if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic * 2)
                    {
                        <p class="bad">Due to this player's very poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation and has attacked @Model.PlayerForm.Player.TimesAttackingThisUpdate times this update.</p>
                    }
                    else if (Model.Bonuses.SneakPercent() <= PvPStatics.SneakAmountBeforeLocationIsPublic)
                    {
                        <p class="bad">Due to this player's poor ability to sneak, you sense that @Model.PlayerForm.Player.GetFullName() is currently at @ViewBag.AtLocation.</p>
                    }
                }
                <h3>@Model.PlayerForm.Form.FriendlyName</h3>
            </center>
            <p>@Model.PlayerForm.Form.Description</p>

            @if (ViewBag.IsMe && ViewBag.FormSkills.Count > 0)
            {
                <div>
                    Being in this form grants you the following skills:
                    <ul>
                        @foreach (var effect in ViewBag.FormSkills)
                        {
                            <li>@effect.FriendlyName</li>
                        }
                    </ul>
                </div>
            }
        </div>
    </center>

    <div style="clear:both"></div>

    @{
        if (Model.ShowInventory)
        {
            @Html.Partial(MVC.PvP.Views.partial_InventoryEquipped, Model.Items)
        }
    }

    <div style="clear:both"></div>
    @Html.Partial(MVC.PvP.Views.partial.partial_AllBuffsTable, Model.Bonuses)
    <div style="clear:both"></div>





</div>
@{
    if (User.IsInRole(PvPStatics.Permissions_Moderator) || User.IsInRole(PvPStatics.Permissions_Admin))
    {
        @section menubottom
        {
            @{ if (Model.PlayerForm.Player.MembershipId != null)
               {
                   <div id="altsDiv" style="display: none;">
                       <p class="small center-block">
                           <text>
                               @{
                                    foreach (var user in PlayerProcedures.GetLikeIp(Model.PlayerForm.Player.IpAddress))
                                    {
                                        string mode;

                                        if (user.GameMode == 0)
                                        {
                                            mode = "sp-mode";
                                        }
                                        else if (user.GameMode == 1)
                                        {
                                            mode = "p-mode";
                                        }
                                        else
                                        {
                                            mode = "pvp-mode";
                                        }

                                        <a href="@Url.Action(MVC.PvP.LookAtPlayer(user.Id))" class="pagination">|<span class="@mode"> @user.FirstName @user.LastName </span>@if (user.MembershipId == null)
                                        {<b class="bad glyphicon glyphicon-erase"></b>}|</a>
                                    }
                                }
                           </text>
                       </p>
                   </div>
                   <div style="text-align:center;">
                        <p class="rowDivider">

                            <b>User: </b>@Model.PlayerUserStrikesDetail.User.UserName || <b>ID: </b>@Model.PlayerForm.Player.MembershipId || <b>IP: </b>@Model.PlayerForm.Player.IpAddress<br />
                            <b class="small">
                                <text>
                                    @if (Model.PlayerForm.Player.FlaggedForAbuse)
                                    {<span class="glyphicon glyphicon-remove text-danger stroke-white well-sm" title="Attacks locked."></span>}
                                    else
                                    {<span class="glyphicon glyphicon-ok text-success stroke-white well-sm" title="Attacks unlocked."></span>}

                                    @if (Model.PlayerForm.Player.IsBannedFromGlobalChat)
                                    {<span class="glyphicon glyphicon-volume-off text-danger stroke-white well-sm" title="Chat banned."></span>}
                                    else
                                    {<span class="glyphicon glyphicon-volume-up text-success stroke-white well-sm" title="No chat ban."></span>}

                                    @if (@Model.IsPvPLocked)
                                    {<span class="glyphicon glyphicon-pawn text-danger stroke-white well-sm" title="PvP locked."></span>}
                                    else
                                    {<span class="glyphicon glyphicon-queen text-success stroke-white well-sm" title="PvP unlocked."></span>}

                                    @if (@Model.IsAccountLockedOut)
                                    {<span class="glyphicon glyphicon-lock text-danger stroke-white well-sm" title="Account is locked out."></span>}
                                    else
                                    {<span class="glyphicon glyphicon-lock text-success stroke-white well-sm" title="Account is not locked out."></span>}

                                    @if (!@Model.ChaosChangesEnabled)
                                    {<span class="glyphicon glyphicon-fire text-danger stroke-white well-sm" title="Chaos changes are disabled."></span>}
                                    else
                                    {<span class="glyphicon glyphicon-fire text-success stroke-white well-sm" title="Chaos changes are enabled."></span>}

                                    <span class="glyphicon glyphicon-user text-info stroke-white well-sm" title="Number of potential alts"></span>(@PlayerProcedures.GetLikeIp(Model.PlayerForm.Player.IpAddress).Count())

                                    @if (Model.PlayerUserStrikesDetail.User.Strikes.Any(i => i.Timestamp.AddDays(30) > DateTime.Now))
                                    {<span class="glyphicon glyphicon-warning-sign text-danger stroke-white well-sm" title="Strike given within the last 30 days."></span>}
                                    else
                                    {<span class="glyphicon glyphicon-warning-sign text-success stroke-white well-sm" title="No recent strikes."></span>}(@Model.PlayerUserStrikesDetail.User.Strikes.Count(i => i.Timestamp.AddDays(30) > DateTime.Now)/@Model.PlayerUserStrikesDetail.User.Strikes.Count())
                                </text>
                            </b>
                        </p>
                    </div>
                }
            }

            @if (Model.PlayerForm.Player.FlaggedForAbuse)
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Unlock this player for suspicious activity</a></li>
            }
            else
            {
                <li><a href="@Url.Action(MVC.PvP.FlagForSuspiciousActivity(Model.PlayerForm.Player.Id))">Lock this player for suspicious activity</a></li>
            }
            @if (Model.IsPvPLocked)
            {
                <li><a href="@Url.Action(MVC.Moderator.LockPvP(Model.PlayerForm.Player.MembershipId, false))">Unlock this player from PvP</a></li>
            }
            else
            {
                <li><a href="@Url.Action(MVC.Moderator.LockPvP(Model.PlayerForm.Player.MembershipId, true))">Lock this player from PvP</a></li>
            }

            <li><a href="@Url.Action(MVC.PvPAdmin.ResetAllPlayersWithIPAddress(Model.PlayerForm.Player.IpAddress))">Reset IP Address</a></li>
            @if (Model.PlayerForm.Player.IsBannedFromGlobalChat)
            {
                <li><a href="@Url.Action(MVC.PvPAdmin.ToggleBanOnGlobalChat(Model.PlayerForm.Player.Id))">Lift ban on global chat</a></li>
            }
            else
            {
                <li><a href="@Url.Action(MVC.PvPAdmin.ToggleBanOnGlobalChat(Model.PlayerForm.Player.Id))">Toggle ban on global chat</a></li>
            }
            <li><a href="@Url.Action(MVC.PvPAdmin.ViewPlayerItems(Model.PlayerForm.Player.Id))">Audit items</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.ViewPlayerLog(Model.PlayerForm.Player.Id))">Check player log</a></li>
            <li><a href="@Url.Action(MVC.Chat.ChatLog($"owner_{Model.PlayerForm.Player.Id}", "lasth"))">Owner chat log</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.AdminRename(Model.PlayerForm.Player.Id))">Rename</a></li>
            <li><a href="@Url.Action(MVC.Moderator.RevertToBase(Model.PlayerForm.Player.Id))">Revert to Base</a></li>
            <li><a href="@Url.Action(MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))">Chaos Actions</a></li>
            @if (User.IsInRole(PvPStatics.Permissions_Admin))
            {
                <li><a href="@Url.Action(MVC.PvPAdmin.JokeShopAdminActions(Model.PlayerForm.Player.Id))">Joke Shop Actions</a></li>
            }
            <li><a href="@Url.Action(MVC.Settings.ViewStrikes(Model.PlayerForm.Player.MembershipId))">View/Add Strikes</a></li>
            <li><a href="@Url.Action(MVC.Moderator.SetAccountLockoutDate(Model.PlayerForm.Player.MembershipId))">Set Account Lockout Date</a></li>
            <li><a id="ForceUserLogout" href="javascript:void(0)">Force User Logout</a></li>
            <li><a href="#showAlts" id="showAlts">Show Potential Alts</a></li>
        }
    }
    else if (PvPStatics.ChaosMode && User.IsInRole(PvPStatics.Permissions_Chaoslord))
    {
        @section menubottom
        {
            <li>
                <a href="@Url.Action(MVC.PvPAdmin.RenamePlayer(Model.PlayerForm.Player.Id))">
                    @if (!@Model.ChaosChangesEnabled)
                    {<span class="glyphicon glyphicon-fire text-danger stroke-white well-sm" title="Chaos changes are disabled."></span>}
                    else
                    {<span class="glyphicon glyphicon-fire text-success stroke-white well-sm" title="Chaos changes are enabled."></span>}
                    Chaos Actions
                </a>
            </li>

        }
    }
}

@functions{

    public string TokenHeaderValue()
    {
        AntiForgery.GetTokens(null, out var cookieToken, out var formToken);
        return cookieToken + ":" + formToken;
    }

    public string GetUserId()
    {
        return Model.PlayerForm.Player.MembershipId;
    }

    public string GetApiUrl()
    {
        return "/api";
    }

}

@section scripts
{
    <script src="@Links.Scripts.buffsTableColoring_js"></script>
    <script>

    function detail_success() {
        //$('#itemDetailModal').modal('show');
    }

    function detail_failure() {
        $("#fullDetails").html("Failed to load details");
    }

    function detail_wait() {
        $("#fullDetails").html("Loading details...");
    }

    $(document).ready(function () {
        // get current url that the page is on
        var currentUrl = new URL(window.location);

        $("#showAlts").click(function () {
            if ($("#altsDiv").is(":visible") === false) {
                $("#altsDiv").show();
            } else {
                $("#altsDiv").hide();
            }
        });

        $("#ForceUserLogout").on("click", function () {
            $.ajax({
                url: '@GetApiUrl()@Url.Action("Post", "AdminSignOut")',
                type: "post",
                contentType: "application/json",
                data: JSON.stringify({
                    TargetUserNameId: '@GetUserId()'
                }),
                dataType: "json",
                headers: {
                    RequestVerificationToken: '@TokenHeaderValue()'
                },
                complete: function (response, textStatus) {
                    var redirectError = response.getResponseHeader("X-Responded-JSON");

                    if (redirectError)
                    {
                        var redirectErrorJson = JSON.parse(redirectError);

                        if (redirectErrorJson.status == 401)
                        {
                            // get the url that asp wants to redirect the page to after a login
                            var redirectUrl = new URL(redirectErrorJson.headers.location);

                            // set the query string that the login page will have to be the query string that the current page has because of silly "helpful" things
                            redirectUrl.search = currentUrl.search;

                            // append the ReturnUrl to be everything to the right of the hostname
                            redirectUrl.searchParams.append("ReturnUrl", currentUrl.pathname + currentUrl.search + currentUrl.hash);

                            window.location.href = redirectUrl;

                            return;
                        }
                    }

                    var resultContainer = $("#resultContainer");
                    var errorContainer = $("#errorContainer");

                    resultContainer.text(response.responseJSON.Result);
                    errorContainer.text(response.responseJSON.Error);

                    $('html, body').animate({
                        scrollTop: 0
                    }, 500);
                }
            });
        });

        var nameNode = $('.avatarName');

        if (@(Model.PlayerForm.Player.IsUsingOriginalName() ? "true" : "false"))
        {
            nameNode.attr('title', "This player is using their original name");
        }
        else
        {
            nameNode.attr('title', "Double tap to see this player's original name");
        }

        nameNode.on('dblclick', function () {
            getSelection().removeAllRanges();
            $('.avatarOriginalName').toggle();
            return false;
        });

    });

    </script>
}

@section head
{
    <style>
        .leftDisplay {
            background-size: 100% 100%;
            position: relative;
            text-align: left;
            height: 400px;
            width: 400px;
            display: inline-table;
            vertical-align: top;
            margin: 0px;
        }

        .iconPortrait {
            float: right;
            position: relative;
        }

        .rightDisplay {
            padding-left: 10px;
            padding-right: 10px;
            width: 480px;
            display: inline-table;
            vertical-align: top;
            text-align: left;
        }

        .textName {
            font-size: 25px;
            text-align: center;
        }

        .textDescription {
            font-size: 14px;
        }

        .textMobility {
            font-size: 16px;
            font-style: italic;
        }

        .Links {
            display: none;
        }

        .bad {
            margin: 0;
            padding: 0;
            text-align: center;
        }

        .center {
            margin: 0;
            padding: 0;
            text-align: center;
        }

        .health {
            font-size: 12px;
        }

        .mana {
            font-size: 12px;
        }

        @@media screen and (max-width: 520px) {
            .leftDisplay {
                height: 300px;
                width: 300px;
            }

            .rightDisplay {
                width: 100%;
            }
        }

        .itemBox {
            height: 100% !important;
        }

        .Links a {
            margin-right: 30px;
        }
    </style>
}
