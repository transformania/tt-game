@model TT.Domain.ViewModels.FriendPageViewModel
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics
@using TT.Domain.Procedures
@{
    ViewBag.Title = "My Friends";
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    <li><a href="@Url.Action(MVC.PvP.PlayerLookup())">Search for player by name</a></li>
}

@{

    if (!Model.IsOnlineToggled)
    {
        <div class="specialBox">
            You are showing your friends your activity timer. <a href="@Url.Action(MVC.Settings.ToggleOnline(true))">Toggle it to your last action timer.</a>
            <br>
            Your last activity was <b>@HtmlHelpers.DatetimeToTimeago(PlayerProcedures.GetPlayerLastActivityTimestamp(Model.PlayerId))</b>.
        </div>
    }
    else
    {
        <div class="specialBox">
            You are showing your friends your last action timer. <a href="@Url.Action(MVC.Settings.ToggleOnline(false))">Toggle it to your activity timer.</a>
            <br>
            Your last action was <b>@HtmlHelpers.DatetimeToTimeago(PlayerProcedures.GetPlayerLastActionTimestamp(Model.PlayerId))</b>.
        </div>
    }

    if (Model.FriendOnlyMessages)
    {
        <div class="specialBox">
            You are currently only allowing messages from friends. <a href="@Url.Action(MVC.Settings.UpdateFriendOnlyMessages(false))">Toggle it to allow messages from all users.</a>
            <br>
        </div>
    }
    else
    {
        <div class="specialBox">
            You are currently allowing messages from all users. <a href="@Url.Action(MVC.Settings.UpdateFriendOnlyMessages(true))">Toggle it to allow messages only from friends.</a>
            <br>
        </div>
    }

    if (Model.ConfirmedFriends.Any(m => m.dbPlayer != null))
    {

        <div class="specialBox specialHeader">
            <b>Active Friends (@Model.ConfirmedFriends.Count(m => m.dbPlayer != null))</b>
        </div>

        <div class="containerInner">
            <table id="MyFriends" class="table table-hover dt-responsive messageTable" data-paging="false" data-info="false">
                <thead>
                    <tr>
                        <th style="width: 55%;">Name</th>
                        <th style="width: 20%;">Last Activity</th>
                        <th style="width: 15%;" data-orderable="false">Delete</th>
                        <th style="width: 10%;">Nickname</th>
                    </tr>
                </thead>
                <tbody>

                    @{
                        foreach (var fp in Model.ConfirmedFriends.Where(m => m.dbPlayer != null))
                        {
                            <tr>

                                @{
                                    if (fp.dbPlayer.Mobility == PvPStatics.MobilityFull)
                                    {
                                        <td>
                                            <a href="@Url.Action(MVC.PvP.LookAtPlayer(fp.dbPlayer.Id))">@fp.dbPlayer.GetFullName()</a>
                                        </td>
                                    }
                                    else if (fp.dbPlayer.Mobility == PvPStatics.MobilityInanimate)
                                    {
                                        <td>
                                            <a href="@Url.Action(MVC.PvP.LookAtPlayer(fp.dbPlayer.Id))">@fp.dbPlayer.GetFullName() (inanimate)</a>
                                        </td>
                                    }

                                    else if (fp.dbPlayer.Mobility == PvPStatics.MobilityPet)
                                    {
                                        <td>
                                            <a href="@Url.Action(MVC.PvP.LookAtPlayer(fp.dbPlayer.Id))">@fp.dbPlayer.GetFullName() (animal)</a>
                                        </td>
                                    }

                                    if (!PlayerProcedures.GetPlayerOnlineToggle(fp.dbPlayer.MembershipId))
                                    {
                                        <td class="timeago" style="line-height: 17px;">@fp.dbPlayer.OnlineActivityTimestamp.ToString("u")</td>
                                    }
                                    else
                                    {
                                        <td class="timeago" style="line-height: 17px;">@fp.dbPlayer.LastActionTimestamp.ToString("u")</td>
                                    }

                                    <td>
                                        <a href="@Url.Action(MVC.PvP.RespondToFriendRequest(fp.dbFriend.Id, "defriend"))">Defriend</a>
                                    </td>

                                    <td>


                                        @if (fp.dbPlayer.MembershipId != fp.dbFriend.OwnerMembershipId)
                                        {
                                            <a href="@Url.Action(MVC.Settings.SetFriendNickname(fp.friendId))">@fp.dbFriend.OwnerNicknameForFriend</a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action(MVC.Settings.SetFriendNickname(fp.friendId))">@fp.dbFriend.FriendNicknameForOwner</a>

                                        }



                                    </td>

                                }

                            </tr>
                        }

                    }
                </tbody>
            </table>

        </div>
    }
    else
    {
        <div class="containerInner">
            <p class="center-block">You don't have any friends yet this round! Maybe it's time to make some new allies?</p>
        </div>
    }
}




@{
    if (Model.RequestsForMe.Any(m => m.dbPlayer != null))
    {

        <div class="specialBox specialHeader topBorder">
            <b>Requests sent to You (@Model.RequestsForMe.Count(m => m.dbPlayer != null))</b>
        </div>



        <div class="containerInner">
            <table class="table table-hover messageTable">

                <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var fp2 in Model.RequestsForMe.Where(m => m.dbPlayer != null))
                    {
                        <tr>
                            <td><a href="@Url.Action(MVC.PvP.LookAtPlayer(fp2.dbPlayer.Id))">@fp2.dbPlayer.GetFullName() (#@fp2.dbPlayer.MembershipId)</a></td>
                            <td><a href="@Url.Action(MVC.PvP.RespondToFriendRequest(fp2.dbFriend.Id, "accept"))">Accept</a></td>
                            <td><a href="@Url.Action(MVC.PvP.RespondToFriendRequest(fp2.dbFriend.Id, "deny"))">Deny</a></td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>


    }
    else
    {
        <div class="containerInner" style="padding-top:0px !important;">
            <p class="center-block">You don't have any unaccepted requests sent to you.</p>
        </div>
    }
}


@{
    if (Model.MyOutgoingRequests.Any(m => m.dbPlayer != null))
    {
        <div class="specialBox specialHeader topBorder">
            <b>Requests you've sent (@Model.MyOutgoingRequests.Count())</b>
        </div>

        <div class="containerInner">
            <table class="table table-hover messageTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var fp3 in Model.MyOutgoingRequests.Where(m => m.dbPlayer != null))
                    {
                        <tr>
                            <td>
                                <a href="@Url.Action(MVC.PvP.LookAtPlayer(fp3.dbPlayer.Id))">@fp3.dbPlayer.GetFullName()</a>
                            </td>
                            <td>
                                <a href="@Url.Action(MVC.PvP.RespondToFriendRequest(fp3.dbFriend.Id, "cancel"))">Cancel</a>
                            </td>

                        </tr>
                    }




                </tbody>
            </table>
        </div>

    }
    else
    {
        <div class="containerInner" style="padding-top:0px !important;">
            <p class="center-block">You don't have any unaccepted friend requests that you have sent out.</p>
        </div>
    }
}

<div class="containerInner" style="padding-top:0px !important;">
    <p class="center-block">You may have more friends who have not yet made a character this round.  They will appear on this page when they have.</p>
</div>

@section head
{
    <style>
        h1 {
            text-align: center;
        }

        .friendListing {
            width: 100%;
            border: 1px solid lightgray;
            position: relative;
            float: left;
            margin-top: 5px;
            padding: 0;
        }

        .friendonline {
            color: green;
        }

        .friendoffline {
            color: red;
        }

        .divblock {
            position: relative;
            float: left;
            width: 100%;
        }
    </style>
}

@section scripts
{
    <script>
        $(document).ready(function () {
            $('#MyFriends').dataTable({
                "columnDefs": [{
                    "targets": 1,
                    "render": function (data, type, full, meta) {
                        if (type == "display") return moment(data).fromNow();
                        return data;
                    }
                }]
            });
        });
    </script>
}
