@model TT.Domain.ViewModels.PlayPageViewModel
@using TT.Domain.Models
@using TT.Domain.Procedures
@using TT.Domain.Statics
@using TT.Web.CustomHtmlHelpers

@{
    ViewBag.Title = "Play";
}

@section menu
{
    <li>
        <span id="timerBox" class="glyphicon glyphicon-time" aria-hidden="true" title="Click to see how long ago the last update ran."></span>
        <span id="turn_countdown">-:--</span>
    </li>
    <li><a href="@Url.Action(MVC.PvP.WorldMap("false"))">Map</a></li>
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">My Player <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.PvP.ViewLog())">Last Actions (@Model.PlayerLog.Count(i => i.HideLog == false))</a></li>
            <li class="hidden-xs"><a href="@Url.Action(MVC.Item.MyInventory())">Inventory</a></li>
            <li><a href="@Url.Action(MVC.PvP.MySkills())">Spells</a></li>
            <li><a href="@Url.Action(MVC.PvP.MyPerks())">My Effects</a></li>
            <li><a href="@Url.Action(MVC.MindControl.MindControlList())">Mind Control</a></li>
            <li><a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.You.Player.Id))">Look at Yourself</a></li>
            <li><a href="@Url.Action(MVC.Settings.PlayerStats(Model.You.Player.MembershipId))">My Statistics</a></li>
            <li><a href="@Url.Action(MVC.PvP.SelfRestore())">Self Restore (3 AP, 10 Mana)</a></li>
            @{
                if (PvPStatics.ChaosMode)
                {
                    <li><a href="@Url.Action(MVC.Settings.ChaosRestoreBase(2))">Chaos Mode: Instant Restore</a></li>
                }
            }
        </ul>
    </li>
    <li><a href="@Url.Action(MVC.PvP.MyFriends())">Friends</a></li>
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Chat <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Chat.Index("global"))" target="_blank">Global chat</a></li>
            @{
                if (Model.You.Player.Covenant != null && Model.You.Player.Covenant > 0)
                {
                    <li><a href="@Url.Action(MVC.Chat.Index($"coven_{Model.You.Player.Covenant}"))" target="_blank">Chat with my covenant</a></li>
                }
            }
            <li><a href="@Url.Action(MVC.Chat.Index($"owner_{Model.You.Player.Id}"))" target="_blank">Chat with my pet and items</a></li>
            <li><a href="@Url.Action(MVC.Chat.ChatLog("global", "lasth"))" target="_blank">Chat logs</a></li>
        </ul>
    </li>
    <li><a href="@Url.Action(MVC.Covenant.MyCovenant())">Covenant</a></li>

    @{
        var AvailableQuests = QuestProcedures.GetAvailableQuestsAtLocation(PlayerProcedures.GetPlayer(Model.You.Player.Id), PvPWorldStatProcedures.GetWorldTurnNumber()).Count(q => q.Location == Model.You.Player.dbLocationName);
        var AllQuests = QuestProcedures.GetAllQuestStartsAtLocation(Model.You.Player.dbLocationName).Count(q => q.IsLive);

        if (AvailableQuests == 0)
        {
            <li><a style="cursor: not-allowed; opacity: 0.6;">Quest (@AvailableQuests/@AllQuests)</a></li>
        }
        else
        {
            <li><a href="@Url.Action(MVC.Quest.QuestsAvailableHere())">Quest (@AvailableQuests/@AllQuests)</a></li>
        }
    }

    <li><a href="@Url.Action(MVC.Contribution.Contribute())">Contribute</a></li>
    @{
        if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
        {
            <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Staff <span class="caret"></span></a>
                <ul class="dropdown-menu">
                    @if (User.IsInRole(PvPStatics.Permissions_Admin))
                    {
                        <li><a href="@Url.Action(MVC.PvPAdmin.Index())">Admin</a></li>
                    }
                    @if (User.IsInRole(PvPStatics.Permissions_Moderator))
                    {
                        <li><a href="@Url.Action(MVC.Moderator.Index())">Moderator</a></li>
                    }
                </ul>
            </li>
        }
    }

    <li class="visible-xs-inline"><a href="@Url.Action(MVC.Item.MyInventory())">Inventory @Model.PlayerItems.Count(i => !i.IsEquipped)/@Model.InventoryMaxSize </a></li>
    @{
        if (Model.You.Player.UnusedLevelUpPerks > 0)
        {
            <li><a href="@Url.Action(MVC.PvP.LevelupPerk())" class="levelUp">Level Up!</a></li>
        }
    }

    <li><a href="@Url.Action(MVC.Messages.Index())" class="glyphicon glyphicon-envelope @(Model.HasNewMessages ? "inboxNew" : "")">(@Model.UnreadMessageCount)</a></li>

    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span class="glyphicon glyphicon-wrench"></span><span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Settings.Settings())">Settings</a></li>
            <li><a href="@Url.Action(MVC.Settings.MyBlacklistEntries())">My blacklist entries</a></li>
            <li><a href="@Url.Action(MVC.Settings.SetBio())">Update bio</a></li>
            <li><a href="@Url.Action(MVC.PvP.ReserveName())">Reserve this name</a></li>
            <li>
                @{
                    if (Model.You.Player.Gender == "female")
                    {
                        <a href="@Url.Action(MVC.Settings.ChangeGender(0))" class="mark" alt="Buoy" title="👯‍♂️">Change to Male ♂</a>
                    }
                    else
                    {
                        <a href="@Url.Action(MVC.Settings.ChangeGender(1))" class="mark" alt="Grill" title="👯‍♀️">Change to Female ♀</a>
                    }
                }
            </li>
        </ul>
    </li>
}

@Html.Partial(MVC.PvP.Views.partial.RoundStatus, Model.World)

<div class="specialBox specialBox2">
    <span class="turnNumber">Turn #<b>@ViewBag.WorldTurnNumber/@PvPStatics.RoundDuration</b></span>
    <span id="liveConnectionNotice" class="noticeOff" title="If this icon is a green tick, you are connected to the server and will receive live notifications when attacked or messaged."><span id="liveConnectionIcon" class="glyphicon glyphicon-remove-circle"> </span><span class="sr-only">Disconnected:</span></span>
    Transformania Time has <b>@Model.WorldStats.TotalPlayers</b> players, <b>@Model.WorldStats.CurrentOnlinePlayers</b> of which are currently online.
</div>

<ul id="notificationBox" style="display:none;">
    @{
        foreach (var log in Model.PlayerLogImportant)
        {
            <li class="frontPageNotification">
                @Html.Raw(log.Message) <span class="timeago">@HtmlHelpers.DatetimeToTimeago(log.Timestamp)</span>
            </li>
        }
    }
</ul>

<p id="dismissNotficationBox" style="display:none;"><a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '0px'">[ -- ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '100px'">[ - ]</a> @Ajax.ActionLink("Dismiss Notifications", MVC.PvP.DismissNotifications_Ajax(), new AjaxOptions { HttpMethod = "GET", OnSuccess = "dismissNotificationsSuccess", OnFailure = "dismissNotificationsFail" }, null) <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '250px'">[ + ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '500px'">[ ++ ]</a></p>

<div class="offlinePlayersWrapperBG hidden-xs">
    <div class="row" style="margin: 3px;">
        <div class="col-md-1">
            <a href="@Url.Action(MVC.Item.MyInventory())" class="playPageInventoryItem openInventory" style="background-image: url(https://images.transformaniatime.com/Icons/Backpack_Meddle.png);z-index:1;" title="View Inventory">@Model.CurrentCarryWeight/@Model.InventoryMaxSize</a>
        </div>
        <div class="col-md-11">
            <div class="row">
            @{
                foreach (var item in Model.PlayerItems.Where(i => i.IsEquipped && i.ItemSource.ItemType != PvPStatics.ItemType_Rune))
                {
                    <div class="col-md-1" style="padding-left: 2px;">
                        @{
                            if (item.FormerPlayer == null)
                            {
                                <a href="@Url.Action(MVC.Item.MyInventory())">
                                    <div class="playPageInventoryItem @(((item.ItemSource.ItemType == PvPStatics.ItemType_Consumable || item.ItemSource.ItemType == PvPStatics.ItemType_Consumable_Reuseable) && item.TurnsUntilUse > 0) ? "cooldown" : "")" style="background-image: url(@PortraitHelper.GetGraphicByItemType(item.ItemSource.ItemType, item.ItemSource.PortraitUrl, true));" title='@item.ItemSource.FriendlyName'></div>
                                </a>
                            }
                            else
                            {
                                <a href="@Url.Action(MVC.PvP.LookAtPlayer(item.FormerPlayer.Id))">
                                    <div class="playPageInventoryItem @(((item.ItemSource.ItemType == PvPStatics.ItemType_Consumable || item.ItemSource.ItemType == PvPStatics.ItemType_Consumable_Reuseable) && item.TurnsUntilUse > 0) ? "cooldown" : "")" style="background-image: url(@PortraitHelper.GetGraphicByItemType(item.ItemSource.ItemType, item.ItemSource.PortraitUrl, true));" title='@item.ItemSource.FriendlyName, formerly @item.FormerPlayer.FullName'></div>
                                </a>
                            }
                        }
                    </div>
                }
            }
            </div>
        </div>
    </div>
</div>

<div class="containerInner">

    @Html.Partial(MVC.PvP.Views.partial_FrontPageAvatar, Model.You)

    <div id="playerActionBox">
        <a href="@Url.Action(MVC.PvP.Cleanse())" id="actionCleanse" class="actionButton">Cleanse (4 AP, 3 Mana)</a>
        <a href="@Url.Action(MVC.PvP.Meditate())" id="actionMeditate" class="actionButton">Meditate (4 AP)</a>
        <a href="@Url.Action(MVC.PvP.Search())" id="actionSearch" class="actionButton">Search this Area (@String.Format("{0:0.#}", Model.APSearchCost) AP)</a>
    </div>

    <div class="row">
        <div class="col-md-4" style="text-align: center;">
            @Html.Partial(MVC.PvP.Views.partial.movementTable, new TT.Domain.ViewModels.MovementModel(Model.Location, true))
            @{
                <div class="knownspells">Spells:<br />@Model.LocalKnownSpells / @Model.AllLocalSpells</div>
                if (Model.You.Player.ShoutsRemaining > 0)
                {
                    <a href="@Url.Action(MVC.PvP.Shout())" class="shout">Shout</a>
                }

                if (Model.PlayerIsAtBusStop)
                {
                    <a href="@Url.Action(MVC.PvP.Bus())" class="bus">Take Bus</a>
                }

                var safegroundCoven = CovenantDictionary.IdNameFlagLookup.FirstOrDefault(c => c.Value.HomeLocation == Model.Location.dbName);

                if (safegroundCoven.Value != null && !Model.Blind)
                {
                    <span class="covSafeground">Safeground for the <b>@safegroundCoven.Value.Name</b> Covenant</span>
                }
            }
        </div>
        <div class="col-md-8 covenDescription">
            @{
                if (!Model.Blind)
                {
                    <span class="place">@Model.Location.Name [@Model.Location.X,@Model.Location.Y]  <br> </span>

                    @Model.Location.GetDescription()<br />
                    if (safegroundCoven.Value != null && !Model.Blind)
                    {
                        <br>
                        <b>@safegroundCoven.Value.CovenBlurb</b>
                    }
                }

                var enchanted = false;
                if (Model.Location.CovenantController != null)
                {
                    try
                    {
                        var temp2 = CovenantDictionary.IdNameFlagLookup[(int)Model.Location.CovenantController];

                        if (temp2 != null && !Model.Blind)
                        {
                            <span class="covController">Enchanted by the <b>@temp2.Name</b> Covenant <b><span class="playerMediatingNotification">[@Model.Location.TakeoverAmount]</span></b></span>
                            enchanted = true;
                        }
                    }
                    catch
                    {

                    }
                }

                if (Model.You.Player.GameMode == (int)GameModeStatics.GameModes.PvP)
                {
                    if (enchanted && safegroundCoven.Value == null)
                    {
                        <br />
                    }

                    if (Model.You.Player.IsInDungeon())
                    {
                        <a href="@Url.Action(MVC.PvP.EnterDungeon("false"))">Leave the PvP Dungeon (10 AP)</a>
                    }
                    else
                    {
                        if (safegroundCoven.Value == null && (Model.Location.Region != "emptylot" && Model.Location.Region != "tavern"))
                        {
                            <a href="@Url.Action(MVC.PvP.EnchantLocation())">Enchant (3 AP, 10 Mana)</a> <span>&nbsp;</span>
                        }
                        if (Model.You.Player.dbLocationName == "street_9th" || Model.You.Player.dbLocationName == "street_14th_north")
                        {
                            <br /><br />
                            <a href="#showDungeon" id="showDungeon">Enter the PvP Dungeon (10 AP)</a><br /><br />
                            <div id="dungeonDiv" style="display: none;">
                                <p class="bg-warning small">
                                    By entering the dungeon, you consent to being a target of any spell cast upon you. Another player does not have to respect your preferences. If you do not consent to such restriction or the play that Player versus Player entails, do not enter the dungeon.
                                    <br />
                                    <a href="@Url.Action(MVC.PvP.EnterDungeon("true"))" class="btn-sm btn-warning center-block">Yes, I want to enter the dungeon.</a>
                                </p>
                            </div>
                        }

                    }
                }
                else
                {
                    /* Adding as a temporary measure for P-mode players. */
                    if (Model.You.Player.IsInDungeon())
                    {
                        <br />
                        <a href="@Url.Action(MVC.PvP.EnterDungeon("false"))">Leave the PvP Dungeon (10 AP)</a>
                    }
                }
            }
            @{
                foreach (var item in Model.LocationItems)
                {

                    if ((Model.Location.Region == "emptylot") && (item.ItemSourceId == ItemStatics.MallKeySourceId))
                    {
                        <br /><br />
                        <a href="#" alt="Coming soon!" title="owo what's this?">🎁🎄🎁</a>
                    }

                }
            }

        </div>
    </div>

</div>

@{if (!Model.Blind)
{
    <div id="offlinePlayersButton" class="onlinePlayersButton"><a onclick="showHidePlayers()">Show/Hide online players</a></div>
    <div class="onlinePlayersWrapperBG">
        <div class="row boxContainer">
            @*all players who are online*@
            @{
                foreach (var p in Model.PlayersHere.Where(p => !PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
                {
                    var checkBlacklist = BlacklistProcedures.IsAttackBlacklisted(new Player { MembershipId = Model.You.Player.MembershipId }, new Player { MembershipId = p.Player.MembershipId });

                    if (checkBlacklist == "false") 
                    {
                    <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                        <div class="charaBoxInner">
                            <div>
                                <p>
                                    <div>@Html.Partial(MVC.PvP.Views.Player_Partial, p)</div>
                                    <div style="text-align:center; margin-top:2px;">
                                        @{
                                            if (!AIStatics.IsAFriendly(p.Player.BotId) && Model.You.Player.GameMode != (int)GameModeStatics.GameModes.Invisible)
                                            {
                                                @Ajax.ActionLink("Attack", MVC.PvP.AttackModal(p.Player.Id), new AjaxOptions { UpdateTargetId = "attackModal", InsertionMode = InsertionMode.Replace, HttpMethod = "GET", OnSuccess = "attack_Success", OnFailure = "attack_Failure", OnBegin = "attack_Wait" }, new { @class = "attackLink" })
                                            }

                                            if (p.Player.MindControlIsActive && MindControlProcedures.PlayerWithIdIsMindControlledWithSomeType(p.Player.Id, ViewBag.PlayersUnderMyMindControl))
                                            {
                                                <a href="@Url.Action(MVC.MindControl.MindControlList())" class="attackLink">Mind Control</a>
                                            }
                                            if (p.Player.BotId == AIStatics.LindellaBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TradeWithMerchant("shirt"))" class="attackLink">Trade</a>
                                            }
                                            if (p.Player.BotId == AIStatics.JewdewfaeBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TalkWithJewdewfae())" class="attackLink">Talk</a>
                                            }
                                            if (p.Player.BotId == AIStatics.WuffieBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TradeWithPetMerchant())" class="attackLink">Trade</a>
                                            }
                                            if (p.Player.BotId == AIStatics.ValentineBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TalkToValentine("none"))" class="attackLink">Talk</a>
                                            }
                                            if (p.Player.BotId == AIStatics.BartenderBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TalkToBartender("none"))" class="attackLink">Talk</a>
                                            }
                                            if (p.Player.BotId == AIStatics.MouseBimboBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TalkToCandice())" class="attackLink">Talk</a>
                                            }
                                            if (p.Player.BotId == AIStatics.MouseNerdBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TalkToAdrianna())" class="attackLink">Talk</a>
                                            }
                                            if (p.Player.BotId == AIStatics.LoremasterBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TalkToLorekeeper())" class="attackLink">Talk</a>
                                            }
                                            if (p.Player.BotId == AIStatics.SoulbinderBotId)
                                            {
                                                <a href="@Url.Action(MVC.NPC.TalkToSoulbinder())" class="attackLink">Talk</a>
                                            }
                                        }
                                    </div>
                                </p>
                            </div>
                        </div>
                    </div>
                    }
                    else
                    {
                        <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                            <div class="charaBoxInner alert-warning panel center-block text-center warningText" style="top: 50%;">
                                <div>
                                    <p>
                                        You have this person blacklisted.
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                }

            }
        </div>
    </div>

    <div style="clear:both;"></div>

    if (ViewBag.ShowOffline == null || !ViewBag.ShowOffline)
    {
        <div id="offlinePlayersButton"><a href="@Url.Action(MVC.PvP.ShowOffline())">Show offline players here (@Model.PlayersHere.Count(p => PlayerProcedures.PlayerIsOffline(p.Player)))</a></div>
    }
    

    if (ViewBag.ShowOffline != null && ViewBag.ShowOffline)
    {
        <div id="offlinePlayersButton"><a href="@Url.Action(MVC.PvP.Play())">Hide the @Model.PlayersHere.Count(p => PlayerProcedures.PlayerIsOffline(p.Player)) offline players</a></div>
        <div class="offlinePlayersWrapperBG">
            <div class="row boxContainer">

                @{
                    foreach (var p in Model.PlayersHere.Where(p => PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
                    {
                        <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                            <div class="charaBoxInner">
                                <div>
                                    <p>
                                        @Html.Partial(MVC.PvP.Views.Player_Partial, p)
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    }

    <div class="floorItemsWrapperBG">
        <div class="row boxContainer">
            @{

                foreach (var item in Model.LocationItems)
                {
                    <div class="col-md-2 col-sm-4 col-xs-12 itemBox itemBoxPP">
                        <div class="charaBoxInner">
                            <div>
                                <div class="portrait_item_mainpage" style="background-image: url(@PortraitHelper.GetGraphicByItemType(item.ItemSource.ItemType, item.ItemSource.PortraitUrl, true));">
                                    @{
                                        if (item.ItemSource.ItemType != PvPStatics.ItemType_Consumable && item.Level > 0)
                                        {
                                            <span class="floorItemLevel"><b>@item.Level</b></span>
                                        }
                                    }
                                    @HtmlHelpers.PrintItemTypeIcon(item.ItemSource.ItemType)
                                </div>

                                <div>
                                    @{
                                        if (item.ItemSource.ItemType == PvPStatics.ItemType_Pet)
                                        {
                                            <a href="@Url.Action(MVC.PvP.Take(item.Id))">Tame</a><br>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action(MVC.PvP.Take(item.Id))">Take</a><br>
                                        }

                                        if (item.SoulboundToPlayer != null)
                                        {
                                            <span class="playerMediatingNotification"><b>[SB]</b></span>
                                        }

                                        <span class="floorItemName">@HtmlHelpers.TruncateToLength(item.ItemSource.FriendlyName, 75) @Html.Partial(MVC.Item.Views.partial.PlayPageRuneDetails, item)<br></span>

                                        if (item.FormerPlayer != null)
                                        {
                                            <span class="formerPlayer">(@(item.FormerPlayer.IsUsingOriginalName() ? "Formerly" : "Known as") <a href="@Url.Action(MVC.PvP.LookAtPlayer(item.FormerPlayer.Id))">@item.FormerPlayer.FullName</a>)</span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }

            }
        </div>
    </div>
}
}

@Html.Partial(MVC.PvP.Views.partial.partial_recentActivity, Model.LocationLog)

<div id="modalBackdrop"></div>
<div id="attackModal" class="ui-widget-content ui-draggable" style="display:none;">
    <span id="youAreAttacking"></span>
    <span id="attackClose" onclick="closeAttackModal()">Cancel</span>
    <span id="expand" onclick="expandModal()">Expand</span>
</div>

@section scripts
{
    <script src="@Links.lib.jqueryui.jquery_ui_js"></script>
    <script src="@Links.lib.signalr_js.jquery_signalR_js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="@Links.Scripts.notices_js"></script>
    <script>

    var attacksMade = @Model.You.Player.TimesAttackingThisUpdate;
    var turnNo = @ViewBag.WorldTurnNumber;
    var togglestate = 0;
    var blinkEnabled = 0;

    var secondsToUpdate = @ViewBag.SecondsUntilUpdate;
    var donatorTier = @Model.You.Player.DonatorLevel;
    var playUpdateSound = false;
    var playAttackSound = false;
    var playMessageSound = false;
    var notificationsEnabled = false;

    var timer_minutes = "";
    var timer_seconds = "";
    var turnLengthInSeconds = @TurnTimesStatics.GetTurnLengthInSeconds();

    var ap = @Model.You.Player.ActionPoints;
    var cleanseCost = @PvPStatics.CleanseCost;
    var meditateCost = @PvPStatics.MeditateCost;
    var searchCost = @Model.APSearchCost;
    var attackCostAP = @PvPStatics.AttackCost;
    var attackCap = @PvPStatics.MaxAttacksPerUpdate;

    var name = "@Model.You.Player.GetFullName()";
    var playerMana = @Model.You.Player.Mana;
    var maxLogSize = @ViewBag.MaxLogSize;

    $(document).ready(function () {

        // var msgToReplace = name + " has"
        var text = $("#RecentActivityLog").html();

        for (var i = 0; i <= maxLogSize; i++) {
            text = text.replace(name, "You");
            text = text.replace("You was", "You were");
        }


        $( "#timerBox" ).click(function() {
            alert("The last update was  @HtmlHelpers.DatetimeToTimeago_WithSeconds(Model.LastUpdateTimestamp) (based on when this page was loaded.)  Turns last " + turnLengthInSeconds + " seconds.");
        });


        $("#RecentActivityLog").html(text);

        if (ap < cleanseCost) {
            $("#action_cleanse").attr("href", "#");
            $("#action_cleanse").addClass("disabled");
        }

        if (ap < meditateCost) {
            $("#action_meditate").attr("href", "#");
            $("#action_meditate").addClass("disabled");
        }

        if (ap < searchCost) {
            $("#action_search").attr("href", "#");
            $("#action_search").addClass("disabled");
        }

        if (ap < attackCostAP) {
            $(".action_attack").each(function() {
                $( this ).attr("href", "#");
                $( this ).addClass("disabled");
            });
        }


        // show offline player section when player clicks on the proper div
        $("#showOfflinePlayersButton").click(function() {
            $("#offlinePlayersWrapper").show();
        });

        $("#timeReportClickMe").click(function() {
            $("#timeReport").show();
        });

        $( "#attackModal" ).draggable();
        $( "#attackModal" ).resizable();
        $( document ).keydown(function(evt){
            evt = evt || window.event;
            if ((evt.key && (evt.key == "Escape" || evt.key == "Esc")) ||
                (evt.keyCode && evt.keyCode == 27)) {
                closeAttackModal();
            }
        });

        $("#showDungeon").click(function () {
            if ($("#dungeonDiv").is(":visible") === false) {
                $("#dungeonDiv").show();
            } else {
                $("#dungeonDiv").hide();
            }
        });

    }); // end document.ready

    </script>
}