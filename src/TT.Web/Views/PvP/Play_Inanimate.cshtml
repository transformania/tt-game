@model TT.Domain.ViewModels.InanimatePlayPageViewModel
@using TT.Domain.Procedures
@using TT.Domain.Statics
@using TT.Web.CustomHtmlHelpers

@{
    if (@ViewBag.WorldTurnNumber >= @PvPStatics.RoundDuration)
    {
        <div class="inbetweenRoundNotice">The round has ended.  Check back soon to start again on a fresh round.</div>
    }
}

@section menu
{
    <li>
        <span id="timerBox" class="glyphicon glyphicon-time" aria-hidden="true" title="Click to see how long ago the last update ran."></span>
        <span id="turn_countdown">-:--</span>
    </li>
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">My Player <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.PvP.ViewLog())">Last Actions (@Model.PlayerLog.Count(i => i.HideLog == false))</a></li>
            <li><a href="@Url.Action(MVC.PvP.MySkills())">Spells</a></li>
            <li><a href="@Url.Action(MVC.PvP.MyPerks())">My Effects</a></li>
            <li><a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Player.Id))">Look at Yourself</a></li>
            <li><a href="@Url.Action(MVC.Settings.PlayerStats(Model.Player.MembershipId))">My Statistics</a></li>
            @{
                if (PvPStatics.ChaosMode)
                {
                    <li><a href="@Url.Action(MVC.Settings.ChaosRestoreBase(2))">Chaos Mode: Instant Restore</a></li>
                }
            }
        </ul>
    </li>
    <li><a href="@Url.Action(MVC.PvP.MyFriends())">Friends</a></li>
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Chat <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Chat.Index("global"))" target="_blank">Global chat</a></li>
            @{
                if (Model.HasOwnerChat)
                {
                    <li><a href="@Url.Action(MVC.Chat.Index($"owner_{Model.Player.Id}"))" target="_blank">Chat with my pet and items</a></li>
                }

                if (Model.Item?.Owner != null)
                {
                    <li><a href="@Url.Action(MVC.Chat.Index($"owner_{Model.Item.Owner.Id}"))" target="_blank">Chat with my owner</a></li>
                }

                if (Model.Player.Covenant != null && Model.Player.Covenant > 0)
                {
                    <li><a href="@Url.Action(MVC.Chat.Index($"coven_{Model.Player.Covenant}"))" target="_blank">Chat with my covenant</a></li>
                }
            }
            <li><a href="@Url.Action(MVC.Chat.ChatLog("global", "lasth"))" target="_blank">Chat logs</a></li>
        </ul>
    </li>
    <li><a href="@Url.Action(MVC.Covenant.MyCovenant())">Covenant</a></li>
    <li><a href="@Url.Action(MVC.Contribution.Contribute())">Contribute</a></li>

    @{
        if (User.IsInRole(PvPStatics.Permissions_Admin) || User.IsInRole(PvPStatics.Permissions_Moderator))
        {
            <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Staff <span class="caret"></span></a>
                <ul class="dropdown-menu">
                    @if (User.IsInRole(PvPStatics.Permissions_Admin))
                    {
                        <li><a href="@Url.Action(MVC.PvPAdmin.Index())">Admin</a></li>
                    }
                    @if (User.IsInRole(PvPStatics.Permissions_Moderator))
                    {
                        <li><a href="@Url.Action(MVC.Moderator.Index())">Moderator</a></li>
                    }
                </ul>
            </li>
        }
    }

    <li><a href="@Url.Action(MVC.Messages.Index())" class="glyphicon glyphicon-envelope @(Model.HasNewMessages ? "inboxNew" : "")">(@Model.UnreadMessageCount)</a></li>

    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span class="glyphicon glyphicon-wrench"></span><span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action(MVC.Settings.Settings())">Settings</a></li>
            <li><a href="@Url.Action(MVC.Settings.MyBlacklistEntries())">My blacklist entries</a></li>
            <li><a href="@Url.Action(MVC.Settings.SetBio())">Update bio</a></li>
            <li><a href="@Url.Action(MVC.PvP.ReserveName())">Reserve this name</a></li>
        </ul>
    </li>

    <li><a href="@Url.Action(MVC.PvP.Restart())">Start again as someone else</a></li>
}

@Html.Partial(MVC.PvP.Views.partial.RoundStatus, Model.World)

<div class="specialBox specialBox2">
    <span class="turnNumber">Turn #<b>@ViewBag.WorldTurnNumber/@PvPStatics.RoundDuration</b></span>
    <span id="liveConnectionNotice" class="noticeOff" title="If this icon is a green tick, you are connected to the server and will receive live notifications when attacked or messaged."><span id="liveConnectionIcon" class="glyphicon glyphicon-remove-circle"> </span><span class="sr-only">Disconnected:</span></span>
    Transformania Time has <b>@Model.WorldStats.TotalPlayers</b> players, <b>@Model.WorldStats.CurrentOnlinePlayers</b> of which are currently online.
</div>

<ul id="notificationBox" style="display:none;">
    @{
        foreach (var log in Model.PlayerLogImportant)
        {
            <li class="frontPageNotification">
                @Html.Raw(log.Message) <span class="timeago">@HtmlHelpers.DatetimeToTimeago(log.Timestamp)</span>
            </li>
        }
    }
</ul>

<p id="dismissNotficationBox" style="display:none;"><a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '0px'">[ -- ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '100px'">[ - ]</a> @Ajax.ActionLink("Dismiss Notifications", MVC.PvP.DismissNotifications_Ajax(), new AjaxOptions { HttpMethod = "GET", OnSuccess = "dismissNotificationsSuccess", OnFailure = "dismissNotificationsFail" }, null) <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '250px'">[ + ]</a> <a href="javascript:void(0)" onclick="document.getElementById('notificationBox').style.height = '500px'">[ ++ ]</a></p>

<div class="containerInner">
    <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
            <div class="petItemPortrait img-responsive" style="background-image: url(https://images.transformaniatime.com/itemsPortraits/@Model.PortraitUrl);">
                @HtmlHelpers.PrintOwnerSubPortrait(Model.WornBy)
                <span style="float: right; margin: 10px;" class="icon">
                    @HtmlHelpers.PrintItemTypeIcon(Model.Item?.ItemSource.ItemType)
                </span>
                @if (Model.FriendOnlyMessages)
                {
                    <span class="glyphicon glyphicon-headphones text-danger stroke-white well-sm" style="position: absolute; top: auto; bottom: 6px; right: 70px; width: 16px; height: 16px;" title="Only allowing messages from friends"></span>
                }
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 text-justify">
            <p>
                @{
                    if (Model.Item == null)
                    {
                        <span>You are a lost item, forgotten by the world and everyone in it.</span>
                    }
                    else
                    {
                        if (Model.Item.SoulboundToPlayer == null)
                        {
                            if (!Model.Item.IsPermanent)
                            {
                                <span>Your name is <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Player.Id))">@Model.Player.GetFullName()</a>, or at least it used to be.</span>
                            }
                            else if (Model.Item.Owner == null)
                            {
                                <span>You have hazy memories of once being called <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Player.Id))">@Model.Player.GetFullName()</a>.</span>

                                if (Model.Item.FormerPlayer.IsUsingOriginalName())
                                {
                                    <span>But that's just silly - items don't have names.</span>
                                }
                                else
                                {
                                    <span>Oh how you miss the person who once called you that.</span>
                                }
                            }
                            else
                            {
                                <span>Your owner sometimes refers to you as <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Player.Id))">@Model.Player.GetFullName()</a>.</span>

                                if (Model.Item.FormerPlayer.IsUsingOriginalName())
                                {
                                    <span>What a strange thing to be called!</span>
                                }
                                else
                                {
                                    <span>It's the closest thing you have to a name now.</span>
                                }
                            }
                        }
                        else
                        {
                            if (Model.Item.FormerPlayer.IsUsingOriginalName())
                            {
                                <span>You once were called <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Player.Id))">@Model.Player.GetFullName()</a>, but what use would you have for a name now that the last of your humanity has gone?</span>
                            }
                            else
                            {
                                <span>Your forever owner secretly thinks of you as <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Player.Id))">@Model.Player.GetFullName()</a>, but you don't really have a name.  You don't need one.  All you need is to be there for your owner.</span>
                            }
                        }


                        if (!Model.Item.IsPermanent)
                        {
                            if (Model.Player.InHardmode)
                            {
                                <span>If you could struggle and regain a human form you would find yourself at level <b>@Model.Player.Level</b> with @Model.Player.XP experience points toward the next. But instead you are a level @Model.Item.Level <b>@Model.Form.FriendlyName</b>.</span>
                            }
                            else
                            {
                                <span>Should you struggle and regain a human form you will find yourself at level <b>@Model.Player.Level</b> with @Model.Player.XP experience points toward the next. But for now you are a level @Model.Item.Level <b>@Model.Form.FriendlyName</b>.</span>
                            }
                        }
                        else
                        {
                            <span>You have lost any last hope of restoring yourself to human and are now wholly dedicated to serving your master or mistress as their belonging as a level <b>@Model.Item.Level @Model.Form.FriendlyName</b>.</span>

                            if (Model.Item.SoulboundToPlayer != null)
                            {
                                @Html.Partial(MVC.PvP.Views.partial.SoulboundTo, Model.Item)
                            }
                            else
                            {
                                <span>You have <a href="@Url.Action(MVC.Settings.Settings())">@(Model.Item.ConsentsToSoulbinding ? "consented" : "not consented")</a> to let your current or future owner soulbind you.</span>
                            }
                        }
                    }
                }

            </p>
            <br>

            @{
                if (Model.RenderCaptcha)
                {
                    @Html.Partial(MVC.PvP.Views.partial.captchaForm)
                }
            }

            <p>@Model.Form.Description</p>
            <br>
            @{
                if (Model.Item?.Owner == null)
                {
                    <p>You are currently resting on the ground at <b>@Model.AtLocation.</b>  Maybe someone will come by soon and pick you up--since you're stuck this way, you might as well be appreciated...</p>
                }
                else if (Model.WornBy != null)
                {
                    if(Model.WornBy.Player.BotId == AIStatics.SoulbinderBotId)
                    {
                        if (Model.Item.SoulboundToPlayer != null)
                        {
                            <p>
                            You have been tamed by <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Item.SoulboundToPlayer.Id))">@Model.Item.SoulboundToPlayer.FullName</a>.
                            </p><br>
                        }
                        <p>
                        You are currently held by <a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.WornBy.Player.Id))">@Model.WornBy.Player.GetFullName()</a> and will be kept safe while your owner is indisposed.
                        </p>
                    }
                    else
                    {
                         <p>You are currently @(Model.Item.IsEquipped ? "being worn" : "owned") by <b><a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.WornBy.Player.Id))">@Model.WornBy.Player.GetFullName()</a></b>, a @Model.WornBy.Player.Gender @Model.WornBy.Form.FriendlyName.  You hope they will take good care of you, or should they too find themselves as an object, whoever picks you up next.</p>   
                    }

                    if (Model.WornBy.Player.BotId == AIStatics.ActivePlayerBotId)
                    {
                        <p>
                            <a href="@Url.Action(MVC.Messages.Write(Model.WornBy.Player.Id, -1))" class="inanimateAction">Telepathically communicate with @Model.WornBy.Player.GetFullName()</a>
                        </p>
                    }

                    <p>
                        Although inanimate, you can still move just the tiniest bit.  You can still...
                        <ul class="inanimateActionList">
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("rub"))" class="check inanimateAction">Affectionately rub against your owner (+WP)</a>
                            </li>
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("pinch"))" class="check inanimateAction">Peskily pinch your owner (-WP)</a>
                            </li>
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("soothe"))" class="check inanimateAction">Kindly soothe your owner (+MP)</a>
                            </li>
                            <li>
                                <a href="@Url.Action(MVC.PvP.InanimateAction("zap"))" class="check inanimateAction">Agitatedly zap your owner (-MP)</a>
                            </li>

                            @{
                                if (InanimateXPProcedures.CanShowTFCurseButton(Model.Item))
                                {
                                    <li>
                                        <a href="@Url.Action(MVC.PvP.CurseTransformOwner())" class="check inanimateAction">Attempt to transform your owner!</a>
                                    </li>
                                }

                                if (Model.WornBy != null)
                                {
                                    <li>
                                        <a href="#showEscape" id="showEscape" class="inanimateAction">Attempt to slip free!</a>
                                        <div id="escapeDiv" style="display: none;">
                                            <p class="bg-warning small">
                                                <a href="@Url.Action(MVC.PvP.EscapeFromOwner())" class="btn-sm btn-warning center-block">Yes, I want slip free from the person holding me.</a>
                                                <br>
                                                By selecting this option, you will be dropped from the person holding you. If you are soulbound, this will break it and you will need to be soulbound again.
                                            </p>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    </p>
                }

                if (Model.Item != null && !Model.Item.IsPermanent)
                {
                    <p class="center-block">
                        <span class="place">Struggle free from this form</span>
                    </p>
                    if (Model.Player.InHardmode)
                    {
                        <p>If you could struggle this turn you would have a <b>@Model.StruggleChance% chance</b> of escaping your current form. Too bad you can't.</p>
                    }
                    else if (Model.StruggleChance <= -100)
                    {
                        <p>If you enjoy being an object too much <strong>you might find yourself trapped like this forever!</strong>  You still have a chance of escape if you can bring yourself to fight your transformation.  (@Model.StruggleChance% chance)</p>
                    }
                    else if (Model.StruggleChance <= 0)
                    {
                        <p>You cannot escape this turn (@Model.StruggleChance% chance), but <b>keep struggling</b> to increase your chances of escape on a future turn.</p>
                    }
                    else if (Model.StruggleChance >= 100)
                    {
                        <p>Keep struggling and <b>you should be able to escape very soon!</b>  (@Model.StruggleChance% chance)</p>
                    }
                    else
                    {
                        <p>If you struggle this turn you have a <b>@Model.StruggleChance% chance</b> of escaping your current form.</p>
                    }
                    if (!Model.Player.InHardmode)
                    {
                        <p class="center-block">
                            <a href="@Url.Action(MVC.PvP.FightTheTransformation())" class="check inanimateAction">Fight your transformation and attempt to return to an animate form!</a>
                            <br>
                            <a href="#showInstantLock" id="showInstantLock" class="check inanimateAction">Submit to your transformation and lock as this form</a>
                            <div id="instantlockDiv" style="display: none;">
                                <p class="small">
                                    <a href="@Url.Action(MVC.PvP.InstantLock())" class="check inanimateAction">Yes, I wish to accept my fate.</a>
                                </p>
                            </div>
                        </p>
                    }
                    if (Model.Player.InHardmode)
                    {
                        <p class="center-block">
                            <a href="@Url.Action(MVC.PvP.InstantLock())" class="check inanimateAction">Submit to your transformation and lock as this form</a>
                        </p>
                    }
                }

                if (PvPStatics.ChaosMode)
                {
                    <p>
                        In Chaos Mode you can immediately change back into base form through the <b>My Player</b> menu or the <a href="@Url.Action(MVC.Settings.Settings())">Settings</a> page.
                    </p>
                }
                else
                {
                    if (!Model.Message.IsNullOrEmpty())
                    {
                        <p>
                            @(new MvcHtmlString(Model.Message))
                        </p>
                        <br />
                    }
                    <p>
                        While you're waiting, why not check out the <a href="https://tt-gameshow.transformaniatime.com/" target="_blank">Transformania Gameshow</a>?
                    </p>
                }
            }
        </div>
    </div>
</div>
<div id="offlinePlayersButton" class="onlinePlayersButton"><a onclick="showHidePlayers()">Show/Hide online players</a></div>
<div class="onlinePlayersWrapperBG" style="clear:both; border-bottom:4px solid #A16969;">
    <div class="row boxContainer">
        @{
            foreach (var p in Model.PlayersHere.Where(p => !TT.Domain.Procedures.PlayerProcedures.PlayerIsOffline(p.Player)))
            {
                <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                    <div class="charaBoxInner">
                        <div>
                            <p>

                                @Html.Partial(MVC.PvP.Views.Player_Partial, p)

                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@{if (ViewBag.ShowOffline == null || !ViewBag.ShowOffline)
    {
        <div id="offlinePlayersButton"><a href="@Url.Action(MVC.PvP.ShowOffline())">Show offline players here (@Model.PlayersHere.Count(p => PlayerProcedures.PlayerIsOffline(p.Player)))</a></div>
    }
}

@{if (ViewBag.ShowOffline != null && ViewBag.ShowOffline)
    {
        <div id="offlinePlayersButton"><a href="@Url.Action(MVC.PvP.Play())">Hide the @Model.PlayersHere.Count(p => PlayerProcedures.PlayerIsOffline(p.Player)) offline players</a></div>
        <div class="offlinePlayersWrapperBG">
            <div class="row boxContainer">

                @{
                    foreach (var p in Model.PlayersHere.Where(p => TT.Domain.Procedures.PlayerProcedures.PlayerIsOffline(p.Player)).OrderByDescending(p => p.Player.Level))
                    {
                        <div class="col-md-2 col-sm-4 col-xs-12 charaBox">
                            <div class="charaBoxInner">
                                <div>
                                    <p>
                                        @Html.Partial(MVC.PvP.Views.Player_Partial, p)
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    }
}

@Html.Partial(MVC.PvP.Views.partial.partial_recentActivity, Model.LocationLog)

@section scripts
{
    <script src="@Links.lib.signalr_js.jquery_signalR_js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="@Links.Scripts.notices_js"></script>
    <script>

    var attacksMade = @Model.Player.TimesAttackingThisUpdate;
    var turnNo = @ViewBag.WorldTurnNumber;
    var togglestate = 0;
    var blinkEnabled = 0;

    var secondsToUpdate = @ViewBag.SecondsUntilUpdate;
    var donatorTier = @Model.Player.DonatorLevel;
    var playUpdateSound = false;
    var playAttackSound = false;
    var playMessageSound = false;
    var notificationsEnabled = false;

    $(document).ready(function() {

        $( "#timerBox" ).click(function() {
            alert("The last update was  @HtmlHelpers.DatetimeToTimeago_WithSeconds(Model.LastUpdateTimestamp) (based on when this page was loaded.)  Turns last " + @TurnTimesStatics.GetTurnLengthInSeconds() + " seconds.");
        });

        $(".check").each(function () {
            if (attacksMade>=@PvPStatics.MaxActionsPerUpdate) {
                $( this ).attr("href", "#");
                $( this ).addClass("disabled");
            }
        });

    });

    function pingDone(data) {
        if (data > turnNo) {
            turnNo = data;
            blinkEnabled = 1;
        }
    }

    function fail() {
        // alert("fail");
    }

    $("#showEscape").click(function () {
        if ($("#escapeDiv").is(":visible") === false) {
            $("#escapeDiv").show();
        } else {
            $("#escapeDiv").hide();
        }
    });

    $(document).ready(function () {
        $("#showInstantLock").click(function () {
            if ($("#instantlockDiv").is(":visible") === false) {
                $("#instantlockDiv").show();
            } else {
                $("#instantlockDiv").hide();
            }
        });
    });

    </script>
}
