@model IEnumerable<TT.Domain.World.DTOs.LocationLogDetail>
@using TT.Web.CustomHtmlHelpers
@using TT.Domain.Statics

<div style="clear:both;"></div>

<ul id="RecentActivityLog">
    @{
        foreach (var log in Model)
        {
            <li>

                @{ 
                    switch (log.LogType)
                    {
                        case LogStatics.LOG_TYPE_BOLD: // Bold
                            <b>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</b>
                            break;
                        case LogStatics.LOG_TYPE_BAD: // Bad
                            <span class='bad'>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</span>
                            break;
                        case LogStatics.LOG_TYPE_GOOD: // Good
                            <span class='good'>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</span>
                            break;
                        case LogStatics.LOG_TYPE_ATTACK: // Attack
                            <span class='playerAttackNotification'>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</span>
                            break;
                        case LogStatics.LOG_TYPE_CLEANSE: // Cleanse
                            <span class='playerCleansingNotification'>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</span>
                            break;
                        case LogStatics.LOG_TYPE_MEDITATE: // Meditate
                            <span class='playerMediatingNotification'>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</span>
                            break;
                        case LogStatics.LOG_TYPE_SEARCH: // Search
                            <span class='playerSearchingNotification'>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</span>
                            break;
                        case LogStatics.LOG_TYPE_SHOUT: // SHOUT!
                            <span class='playerShoutNotification'>@HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))</span>
                            break;
                        default:
                            @HtmlHelpers.PrintLocationLogs(Html.Encode(log.Message))
                            break;
                    }
                }

                @{
                    if (log.ConcealmentLevel > 0)
                    {
                        <span class="playerMediatingNotification">[@log.ConcealmentLevel]</span>
                    }
                }

                <span class="timeago">@HtmlHelpers.DatetimeToTimeago(log.Timestamp)</span>
            </li>
        }
    }
</ul>
