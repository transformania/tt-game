@model TT.Domain.ViewModels.BioPageViewModel
@using Microsoft.AspNet.Identity
@using TT.Domain.Models
@using TT.Domain.ViewModels
@using TT.Domain.Procedures
@{
    ViewBag.Title = $"{ViewBag.Name}'s Bio";
}

@section menu
{
    <li><a href="@Url.Action(MVC.PvP.Play())">Back to game</a></li>
    @{
        if (Model.Player?.BotId == TT.Domain.Statics.AIStatics.ActivePlayerBotId)
        {
            <li><a href="@Url.Action(MVC.PvP.LookAtPlayer(Model.Player.Id))">Look at Player</a></li>
            if (Model.IsMyBio)
            {
                <li><a href="@Url.Action(MVC.Settings.SetBio())">Update Bio</a></li>
            }
            else
            {
                <li><a href="@Url.Action(MVC.Messages.Write(Model.Player.Id, -1))">Send a Message</a></li>
                <li><a href="@Url.Action(MVC.PvP.AddFriend(Model.Player.Id))">Add Friend</a></li>
                var blacklistLevel = BlacklistProcedures.IsAttackBlacklisted(new Player { MembershipId = User.Identity.GetUserId() }, new Player { MembershipId = Model.Player.MembershipId });
                if (blacklistLevel == "0")
                {
                    <li><a href="@Url.Action(MVC.Settings.ChangeBlacklistType(0, Model.Player.Id, "noAttackOrMessage"))">Blacklist (No attacking or messaging)</a></li>
                    <li><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.Player.Id, 0))">Remove Blacklist</a></li>
                }
                else if (blacklistLevel == "1")
                {
                    <li><a href="@Url.Action(MVC.Settings.ChangeBlacklistType(0, Model.Player.Id, "noAttackOnly"))">Blacklist (No attacking)</a></li>
                    <li><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.Player.Id, 0))">Remove Blacklist</a></li>
                }
                else
                {
                    <li><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.Player.Id, 0))">Blacklist (No attacking)</a></li>
                    <li><a href="@Url.Action(MVC.Settings.ToggleBlacklistOnPlayer(Model.Player.Id, 1))">Blacklist (No attacking or messaging)</a></li>
                }
                <li><a href="@Url.Action(MVC.Report.Report(Model.Player.MembershipId))">Report Player</a></li>
            }
        }
    }
}

<div class="containerInner">
    <h1>Player Bio for @ViewBag.Name</h1>

    @{
        if (!Model.PlayerBio.PlayerInfo.IsNullOrEmpty())
        {
            <h3>Player Info</h3>

            @*<p>@HtmlHelpers.StringToWebsite(Model.PlayerInfo)</p>*@

            <p style="white-space: pre-line">@Model.PlayerBio.PlayerInfo</p>
        }
    }


    <h3>Character Bio</h3>

    @{
        if (!Model.PlayerBio.Text.IsNullOrEmpty())
        {
            <p style="white-space: pre-line">@Html.Raw(Model.PlayerBio.Text.Replace("[br]", "<br>"))</p>
        }
    }


    <h3>RP Tags</h3>

    @Html.HiddenFor(m => m.PlayerBio.Tags)

    @Html.Partial(MVC.Settings.Views.partial.rptags)

    <p class="timeago">Last updated @Model.PlayerBio.Timestamp</p><br>

    @{
        if (ViewBag.MyContributions.Count > 0)
        {
            foreach (BioPageContributionViewModel s in ViewBag.MyContributions)
            {
                <p>Author of the <b>@s.SpellName</b> spell which transforms its victim into the <b>@s.FormName</b> form.</p>
            }
        }

        if (ViewBag.MyEffectContributions.Count > 0)
        {
            foreach (BioPageEffectContributionViewModel s in ViewBag.MyEffectContributions)
            {
                if (!s.SpellName.IsNullOrEmpty() && !s.EffectName.IsNullOrEmpty())
                {
                    <p>Author of the <b>@s.EffectName</b> effect cast which is gained by being struck with the <b>@s.SpellName</b> spell.</p>
                }
                else
                {
                    <p>Author of the <b>@s.EffectName</b> effect.</p>
                }

            }
        }

    }

    <h3>Achievement Badges Earned (@Model.Badges.Count())</h3>

    <div class="row">
        @{
            foreach (var a in Model.Badges)
            {
                <div class="col-md-4 stats-leader">
                    <img src="https://images.transformaniatime.com/achievements/@StatsProcedures.StatTypesMap[a.AchievementType].ImageUrl" style="height:100px; width: 100px; margin: 3px; float:left;">
                    <h3 style="margin-top:110px !important;">@StatsProcedures.StatTypesMap[a.AchievementType].FriendlyName</h3><h4> <i>@a.Round</i></h4>
                    <p><i>@StatsProcedures.StatTypesMap[a.AchievementType].Description:</i> <b>@($"{a.Amount:n0}")</b></p>
                </div>
            }
        }
    </div>

</div>

@section scripts
{
    <script>
        $(document).ready(function () {

            var tagstring = $("#PlayerBio_Tags").val();
            console.log("Raw string:  " + tagstring);

            // assign the proper styling onload
            $(".rpTag").each(function () {
                var jQthis = $(this);
                var icon = jQthis.children(".rpIcon");
                var flag = jQthis.children(".sr-only");

                var code = $(this).attr("tagcode");
                var regexs = ";" + code + ".[0-9];";
                var regex = new RegExp(regexs, "i")
                var smatch = tagstring.match(regex);

                var numberValue = -1;
                if (smatch !== null) {
                    console.log("Match found:  " + smatch);
                    numberValue = smatch[0].match(/[0-9]/);
                    console.log("Value of match:  " + numberValue);
                }

                if (numberValue == 0) {
                    jQthis.addClass("neg2");
                    icon.addClass("glyphicon-remove-sign");
                    flag.text("Strong red:");
                } else if (numberValue == 1) {
                    jQthis.addClass("neg1");
                    icon.addClass("glyphicon-remove-circle");
                    flag.text("Light red:");
                } else if (numberValue == 2) {
                    jQthis.addClass("pos1");
                    icon.addClass("glyphicon-ok-circle");
                    flag.text("Light green:");
                } else if (numberValue == 3) {
                    jQthis.addClass("pos2");
                    icon.addClass("glyphicon-ok-sign");
                    flag.text("Strong green:");
                } else {
                    jQthis.addClass("neutral");
                    icon.addClass("glyphicon-question-sign");
                    flag.text("Neutral white:");
                }
            });

        });
    </script>
}
